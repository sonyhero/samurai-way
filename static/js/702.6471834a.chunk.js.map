{"version":3,"file":"static/js/702.6471834a.chunk.js","mappings":"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","sources":["app/model/selectors/chat-selector.ts","webpack://samurai-way/./src/components/Pages/Chat/ui/Chat/ChatMessages/ChatMessage/ChatMessage.module.scss?af8d","components/Pages/Chat/ui/Chat/ChatMessages/ChatMessage/ChatMessage.tsx","webpack://samurai-way/./src/components/Pages/Chat/ui/Chat/ChatMessages/ChatMessages.module.scss?a8ae","components/Pages/Chat/ui/Chat/ChatMessages/ChatMessages.tsx","components/Pages/Chat/ui/Chat/AddChatMessageForm/AddChatMessageForm.tsx","webpack://samurai-way/./src/components/Pages/Chat/ui/ChatPage.module.scss?ea3a","components/Pages/Chat/ui/ChatPage.tsx"],"sourcesContent":["import { RootReducerType } from '../../store'\r\n\r\nexport const getStatus = (state: RootReducerType) => state.chatReducer.status\r\nexport const getMessages = (state: RootReducerType) => state.chatReducer.messages\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ChatMessage_container__xlyOq\",\"avatarContainer\":\"ChatMessage_avatarContainer__fjcf7\",\"fullName\":\"ChatMessage_fullName__u9nzI\"};","import { FC, memo } from 'react'\r\nimport { ChatMessageAPIType } from '../../../../api/chat-api'\r\nimport userPhoto from '../../../../../../../assets/img/user.png'\r\nimport s from './ChatMessage.module.scss'\r\nimport { AvatarDemo } from '../../../../../../ui/avatar'\r\nimport { Typography } from '../../../../../../ui/typography'\r\n\r\nexport const ChatMessage: FC<ChatMessagePropsType> = memo(({ messageBody }) => {\r\n  const { message, photo, userName } = messageBody\r\n\r\n  const avatar = photo || userPhoto\r\n\r\n  return (\r\n    <div className={s.container}>\r\n      {/*<img className={s.avatar} src={avatar} alt={'photo'} />*/}\r\n      <div className={s.avatarContainer}>\r\n        <AvatarDemo src={avatar} />\r\n        <Typography className={s.fullName} variant={'h3'}>\r\n          {userName}\r\n        </Typography>\r\n      </div>\r\n      <Typography variant={'body1'}>{message}</Typography>\r\n    </div>\r\n  )\r\n})\r\n//types\r\ntype ChatMessagePropsType = {\r\n  messageBody: ChatMessageAPIType\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ChatMessages_container__KqbCo\"};","import { UIEvent, useEffect, useRef, useState } from 'react'\nimport { useAppSelector } from '../../../../../../app/store'\nimport { getMessages } from '../../../../../../app/model/selectors/chat-selector'\nimport { ChatMessage } from './ChatMessage/ChatMessage'\nimport s from './ChatMessages.module.scss'\n\nexport const ChatMessages = () => {\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\n  const messages = useAppSelector(getMessages)\n  const [isAutoScrollIsActive, setIsAutoScrollIsActive] = useState(true)\n\n  useEffect(() => {\n    if (isAutoScrollIsActive) {\n      messagesAnchorRef.current?.scrollIntoView({ block: 'end', behavior: 'smooth' })\n    }\n  }, [messages])\n\n  const onScrollHandler = (e: UIEvent<HTMLDivElement>) => {\n    const element = e.currentTarget\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\n      !isAutoScrollIsActive && setIsAutoScrollIsActive(true)\n    } else {\n      isAutoScrollIsActive && setIsAutoScrollIsActive(false)\n    }\n  }\n\n  const mappedMessages = messages?.map((m, index) => <ChatMessage key={index} messageBody={m} />)\n\n  return (\n    <div className={s.container} onScroll={onScrollHandler}>\n      {mappedMessages}\n      <div ref={messagesAnchorRef}></div>\n    </div>\n  )\n}\n","import { useAppDispatch, useAppSelector } from '../../../../../../app/store'\nimport { getStatus } from '../../../../../../app/model/selectors/chat-selector'\nimport { useState } from 'react'\nimport { sendMessage } from '../../../model/chat-reducer'\nimport { TextField } from '../../../../../ui/textfield'\nimport { Button } from '../../../../../ui/button'\nimport s from '../../../../Profile/ui/MyPosts/AddPostForm/AddPostForm.module.scss'\n\nexport const AddChatMessageForm = () => {\n  const status = useAppSelector(getStatus)\n  const [value, setValue] = useState<string>('')\n  const dispatch = useAppDispatch()\n\n  const onChangeHandler = (text: string) => {\n    setValue(text)\n  }\n\n  const addNewMessage = () => {\n    if (!value) {\n      return\n    }\n    dispatch(sendMessage(value))\n    setValue('')\n  }\n  const onKeyPressHandler = () => {\n    addNewMessage()\n  }\n\n  return (\n    <div className={s.formBox}>\n      <TextField\n        className={s.field}\n        onEnter={onKeyPressHandler}\n        onChangeText={onChangeHandler}\n        value={value}\n        placeholder={'type message...'}\n      />\n      <Button className={s.formButton} disabled={status !== 'ready'} onClick={addNewMessage}>\n        Send\n      </Button>\n    </div>\n  )\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ChatPage_container__jWgSQ\"};","import { useEffect } from 'react'\nimport { withAuthRedirect } from '../../../../hoc/withAuthRedirect'\nimport { useAppDispatch } from '../../../../app/store'\nimport { startMessagesListening, stopMessagesListening } from '../model/chat-reducer'\nimport { ChatMessages } from './Chat/ChatMessages/ChatMessages'\nimport { AddChatMessageForm } from './Chat/AddChatMessageForm/AddChatMessageForm'\nimport s from './ChatPage.module.scss'\n\nconst ChatPage = () => {\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, [])\n\n  return (\n    <div className={s.container}>\n      <ChatMessages />\n      <AddChatMessageForm />\n    </div>\n  )\n}\n\nexport default withAuthRedirect(ChatPage)\n"],"names":["getStatus","state","chatReducer","status","getMessages","messages","ChatMessage","memo","_ref","messageBody","message","photo","userName","avatar","userPhoto","_jsxs","className","s","children","_jsx","AvatarDemo","src","Typography","variant","ChatMessages","messagesAnchorRef","useRef","useAppSelector","_useState","useState","_useState2","_slicedToArray","isAutoScrollIsActive","setIsAutoScrollIsActive","useEffect","_messagesAnchorRef$cu","current","scrollIntoView","block","behavior","mappedMessages","map","m","index","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","ref","AddChatMessageForm","value","setValue","dispatch","useAppDispatch","addNewMessage","sendMessage","formBox","TextField","field","onEnter","onChangeText","text","placeholder","Button","formButton","disabled","onClick","withAuthRedirect","startMessagesListening","stopMessagesListening"],"sourceRoot":""}