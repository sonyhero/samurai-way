{"version":3,"file":"static/js/701.0bcd440e.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Pages/Dialogs/DialogsCSS.module.css?f5df","components/Pages/Dialogs/DialogItem/DialogsItem.tsx","components/Pages/Dialogs/Message/Message.tsx","components/Pages/Dialogs/AddMessageForm.tsx","app/selectors/dialogs-selector.ts","components/Pages/Dialogs/DialogsContainer.tsx","components/Pages/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/common/Button/Button.module.css?a777","components/common/Button/Button.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"DialogsCSS_dialogs__bH0PJ\",\"dialogsItems\":\"DialogsCSS_dialogsItems__ObQl5\",\"dialog\":\"DialogsCSS_dialog__y0R2N\",\"active\":\"DialogsCSS_active__GozxH\",\"messages\":\"DialogsCSS_messages__PJg9X\",\"message\":\"DialogsCSS_message__cxPel\"};","import React from 'react'\r\nimport s from '../DialogsCSS.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n  let path = '/dialogs/' + props.id\r\n  return (\r\n    <div className={s.dialog}>\r\n      <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Types\r\ntype DialogItemType = {\r\n  id: number\r\n  name: string\r\n}\r\n","import React from 'react'\r\nimport s from '../DialogsCSS.module.css'\r\n\r\nexport const Message = (props: MessageType) => {\r\n  return <div className={s.message}>{props.messageText}</div>\r\n}\r\n\r\n//Types\r\ntype MessageType = {\r\n  id: number\r\n  messageText: string\r\n}\r\n","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { TextArea } from '../../common/FormsControls/FormsControl'\r\nimport { maxLength, minLength, required } from '../../../utils/validators'\r\nimport { Button } from '../../common/Button/Button'\r\n\r\nconst maxLength100 = maxLength(100)\r\nconst minLength1 = minLength(1)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormAddMessageDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name={'messageText'}\r\n        placeholder={'Enter message'}\r\n        value={'newMessageText'}\r\n        component={TextArea}\r\n        validate={[required, maxLength100, minLength1]}\r\n        // onKeyDown={onKeyDownHandler}\r\n      />\r\n      <br />\r\n      <Button name={'Add message'} />\r\n    </form>\r\n  )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormAddMessageDataType>({ form: 'addMessage' })(AddMessageForm)\r\n\r\n//Types\r\ntype FormAddMessageDataType = {\r\n  messageText: string\r\n}\r\n","import { RootReducerType } from '../store'\r\n\r\n// export const getDialogs = (state: RootReducerType) => state.dialogsReducer.dialogs\r\n// export const getMessages = (state: RootReducerType) => state.dialogsReducer.messages\r\n\r\nexport const getDialogsPage = (state: RootReducerType) => state.dialogsReducer\r\n","import { addMessage, InitialDialogsReducerStateType } from './dialogs-reducer'\r\nimport { Dialogs } from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { RootReducerType } from '../../../app/store'\r\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { ComponentType } from 'react'\r\nimport { getDialogsPage } from '../../../app/selectors/dialogs-selector'\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n  return {\r\n    dialogsPage: getDialogsPage(state),\r\n  }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, {\r\n    addMessage,\r\n  }),\r\n  withAuthRedirect,\r\n)(Dialogs)\r\n//Types\r\nexport type MapDispatchToPropsType = {\r\n  addMessage: (messageText: string) => void\r\n}\r\nexport type MapStateToPropsType = {\r\n  dialogsPage: InitialDialogsReducerStateType\r\n}\r\n","import React from 'react'\r\nimport s from './DialogsCSS.module.css'\r\nimport { DialogItem } from './DialogItem/DialogsItem'\r\nimport { Message } from './Message/Message'\r\nimport { MapDispatchToPropsType, MapStateToPropsType } from './DialogsContainer'\r\nimport { AddMessageReduxForm } from './AddMessageForm'\r\nimport { useAppSelector } from '../../../app/store'\r\nimport { getIsAuth } from '../../../app/selectors/auth-selector'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n  const isAuth = useAppSelector(getIsAuth)\r\n\r\n  const { addMessage, dialogsPage } = props\r\n\r\n  const dialogsDataMap = dialogsPage.dialogs.map((d) => <DialogItem key={d.id} name={d.name} id={d.id} />)\r\n\r\n  const messagesDataMap = dialogsPage.messages.map((m) => <Message key={m.id} messageText={m.messageText} id={m.id} />)\r\n\r\n  const onAddMessage = (data: { messageText: string }) => {\r\n    addMessage(data.messageText)\r\n  }\r\n\r\n  return !isAuth ? (\r\n    <Redirect to={'/login'} />\r\n  ) : (\r\n    <div>\r\n      Dialogs\r\n      <div className={s.dialogs}>\r\n        <div className={s.dialogsItems}>{dialogsDataMap}</div>\r\n        <div className={s.messages}>\r\n          {messagesDataMap}\r\n          <AddMessageReduxForm onSubmit={onAddMessage} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Types\r\ntype DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__MpHMn\",\"deleteTask\":\"Button_deleteTask__CEYcg\",\"disabled\":\"Button_disabled__LCeMy\",\"secondary\":\"Button_secondary__+N0o7\",\"default\":\"Button_default__tVev3\",\"red\":\"Button_red__uwCBn\"};","import React, { memo } from 'react'\r\nimport s from './Button.module.css'\r\n\r\nexport const Button: React.FC<ButtonType> = memo((props) => {\r\n  const { name, disabled, callback, className, xType } = props\r\n\r\n  const finalClassName = `\r\n    ${s.button}\r\n    ${xType === 'delete' ? `${s.red} ${s.deleteTask}` : ''} \r\n    ${xType === 'red' ? `${s.red}` : ''} \r\n    ${className ? s.secondary : s.default}\r\n    `\r\n\r\n  const onClickHandler = () => {\r\n    if (callback) callback()\r\n  }\r\n  return (\r\n    <button disabled={disabled} className={finalClassName} onClick={onClickHandler}>\r\n      {name}\r\n    </button>\r\n  )\r\n})\r\n\r\n//Types\r\ntype ButtonType = {\r\n  name: string\r\n  disabled?: boolean\r\n  callback?: () => void\r\n  className?: boolean\r\n  xType?: string\r\n}\r\n","import React, { ComponentType } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { RootReducerType } from '../app/store'\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.authReducer.isAuth,\r\n  }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent = (props: MapStateToPropsType) => {\r\n    const { isAuth, ...restProps } = props\r\n\r\n    if (!isAuth) {\r\n      return <Redirect to={'/login'} />\r\n    }\r\n    return <Component {...(restProps as T)} />\r\n  }\r\n\r\n  return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n//Types\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n"],"names":["DialogItem","props","path","id","_jsx","className","s","children","NavLink","to","name","Message","messageText","maxLength100","maxLength","minLength1","minLength","AddMessageReduxForm","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","placeholder","value","component","TextArea","validate","required","Button","getDialogsPage","state","dialogsReducer","compose","connect","dialogsPage","addMessage","withAuthRedirect","isAuth","useAppSelector","getIsAuth","dialogsDataMap","dialogs","map","d","messagesDataMap","messages","m","data","Redirect","memo","disabled","callback","xType","finalClassName","concat","onClick","mapStateToProps","authReducer","Component","restProps","_objectWithoutProperties","_excluded","_objectSpread"],"sourceRoot":""}