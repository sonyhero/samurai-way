{"version":3,"file":"static/js/227.3f88477f.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Pages/Profile/ProfileInfo/ProfileInfoCSS.module.css?4502","components/Pages/Profile/ProfileInfo/ProfileStatus/ProfileStatusUseState.tsx","app/selectors/profile-selector.ts","components/Pages/Profile/ProfileInfo/ProfileDescription/Contacts.tsx","components/Pages/Profile/ProfileInfo/ProfileDescription/ProfileDescription.tsx","components/Pages/Profile/ProfileInfo/ProfileAvatar/ProfileAvatar.tsx","components/Pages/Profile/ProfileInfo/ProfileForm/ContactsForm.tsx","components/Pages/Profile/ProfileInfo/ProfileForm/ProfileForm.tsx","components/Pages/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Pages/Profile/MyPosts/MyPostsCSS.module.css?709b","webpack://samurai-way/./src/components/Pages/Profile/MyPosts/Post/PostCSS.module.css?4bba","components/Pages/Profile/MyPosts/Post/Post.tsx","components/Pages/Profile/MyPosts/AddPostForm.tsx","components/Pages/Profile/MyPosts/MyPosts.tsx","components/Pages/Profile/MyPosts/MyPostsContainer.tsx","components/Pages/Profile/Profile.tsx","components/Pages/Profile/ProfileContainer.tsx","webpack://samurai-way/./src/components/common/Button/Button.module.css?a777","components/common/Button/Button.tsx","hoc/withAuthRedirect.tsx","webpack://samurai-way/./src/components/Pages/Login/LoginForm/Login-form.module.scss?6d7f"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfoCSS_descriptionBlock__G0mHy\"};","import React, { ChangeEvent, KeyboardEvent, useEffect, useState } from 'react'\r\n\r\ntype ProfileStatusType = {\r\n  status: string\r\n  updateProfileStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusUseState: React.FC<ProfileStatusType> = (props) => {\r\n  const { status, updateProfileStatus } = props\r\n\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n  const [statusProfile, setStatusProfile] = useState<string>(status)\r\n\r\n  useEffect(() => {\r\n    setStatusProfile(status)\r\n  }, [status])\r\n\r\n  const activateEditMode = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const deActivateEditMode = () => {\r\n    setEditMode(false)\r\n    updateProfileStatus(statusProfile)\r\n  }\r\n\r\n  const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => setStatusProfile(e.currentTarget.value)\r\n\r\n  const onKeyHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Enter') {\r\n      deActivateEditMode()\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {editMode ? (\r\n        <div>\r\n          <input\r\n            autoFocus\r\n            onBlur={deActivateEditMode}\r\n            value={statusProfile}\r\n            onChange={onChangeStatus}\r\n            onKeyDown={onKeyHandler}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <span onDoubleClick={activateEditMode}>{status || 'No status'}</span>\r\n        </div>\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import { RootReducerType } from '../store'\r\n\r\n// export const getPosts = (state: RootReducerType) => state.profileReducer.posts\r\nexport const getProfile = (state: RootReducerType) => state.profileReducer.profile\r\nexport const getContacts = (state: RootReducerType) => state.profileReducer.profile.contacts\r\nexport const getStatus = (state: RootReducerType) => state.profileReducer.profileStatus\r\n","import { getContacts } from '../../../../../app/selectors/profile-selector'\r\nimport React from 'react'\r\nimport { useAppSelector } from '../../../../../app/store'\r\n\r\nexport const Contacts = () => {\r\n  const contacts = useAppSelector(getContacts)\r\n  const mappedContacts = Object.entries(contacts).map((key, index) => {\r\n    return (\r\n      <div key={index}>\r\n        {key[0]}: {key[1]}\r\n      </div>\r\n    )\r\n  })\r\n  return <div>{mappedContacts}</div>\r\n}\r\n","import React from 'react'\r\nimport { ProfileType } from '../../profile-reducer/profile-reducer'\r\nimport { Button } from '../../../../common/Button/Button'\r\nimport { Contacts } from './Contacts'\r\n\r\nexport const ProfileDescription: React.FC<ProfileDescriptionType> = ({ profile, isOwner, setEditMode }) => {\r\n  return (\r\n    <div>\r\n      {isOwner && <Button callback={setEditMode} name={'Edit profile'} />}\r\n      <div>Full name: {profile.fullName}</div>\r\n      <div>About me: {profile.aboutMe}</div>\r\n      <div>Looking for a job: {profile.lookingForAJob ? 'yes' : ' no'}</div>\r\n      {profile.lookingForAJob && <div>My professional skills: {profile.lookingForAJobDescription}</div>}\r\n      <div>\r\n        Contacts: <Contacts />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Types\r\ntype ProfileDescriptionType = {\r\n  profile: ProfileType\r\n  isOwner: boolean\r\n  setEditMode: () => void\r\n}\r\n","import { PhotosType } from '../../profile-reducer/profile-reducer'\r\nimport React from 'react'\r\nimport { Preloader } from '../../../../common/Preloader/Preloader'\r\nimport user from '../../../../../assets/img/user.png'\r\n\r\nexport const ProfileAvatar: React.FC<ProfileAvatarType> = ({ isAvatar, photos }) => {\r\n  return <div>{isAvatar ? <Preloader /> : <img src={photos.large || user} alt={'profile'} />}</div>\r\n}\r\n\r\n//Types\r\ntype ProfileAvatarType = {\r\n  isAvatar: boolean\r\n  photos: PhotosType\r\n}\r\n","import { useSelector } from 'react-redux'\r\nimport { getContacts } from '../../../../../app/selectors/profile-selector'\r\nimport { fieldCreator, Input } from '../../../../common/FormsControls/FormsControl'\r\nimport React from 'react'\r\n\r\nexport const ContactsForm = () => {\r\n  const contacts = useSelector(getContacts)\r\n  const mappedContacts = Object.keys(contacts).map((key, index) => {\r\n    return (\r\n      <div key={index}>\r\n        {key}: {fieldCreator(`contacts.${key}`, key, [], Input)}\r\n      </div>\r\n    )\r\n  })\r\n  return <div>{mappedContacts}</div>\r\n}\r\n","import React from 'react'\r\nimport { Button } from '../../../../common/Button/Button'\r\nimport { fieldCreator, Input, TextArea } from '../../../../common/FormsControls/FormsControl'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { ContactsForm } from './ContactsForm'\r\nimport s from '../../../Login/LoginForm/Login-form.module.scss'\r\n\r\nexport const ProfileForm: React.FC<InjectedFormProps<ProfileFormType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      {props.error && <div className={s.summeryError}>{props.error}</div>}\r\n      <Button name={'Save'} />\r\n      <div>Full name: {fieldCreator('fullName', 'Full name', [], Input)}</div>\r\n      <div>About me: {fieldCreator('aboutMe', 'About me', [], Input)}</div>\r\n      <div>Looking for a job: {fieldCreator('lookingForAJob', '', [], Input, { type: 'checkbox' })}</div>\r\n      <div>\r\n        My professional skills: {fieldCreator('lookingForAJobDescription', 'My professional skills', [], TextArea)}\r\n      </div>\r\n      <div>\r\n        Contacts: <ContactsForm />\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default reduxForm<ProfileFormType>({\r\n  form: 'editProfile',\r\n})(ProfileForm)\r\n\r\n//Types\r\nexport type ProfileFormType = {\r\n  fullName: string\r\n  aboutMe: string\r\n  lookingForAJob: boolean\r\n}\r\n","import React, { ChangeEvent, useState } from 'react'\r\nimport s from './ProfileInfoCSS.module.css'\r\nimport { ProfileType } from '../profile-reducer/profile-reducer'\r\nimport { ProfileStatusUseState } from './ProfileStatus/ProfileStatusUseState'\r\nimport { ProfileDescription } from './ProfileDescription/ProfileDescription'\r\nimport { ProfileAvatar } from './ProfileAvatar/ProfileAvatar'\r\nimport ProfileForm, { ProfileFormType } from './ProfileForm/ProfileForm'\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = (props) => {\r\n  const { profile, profileStatus, updateProfileStatus, isOwner, savePhoto, saveProfile } = props\r\n\r\n  const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n  const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n    if (e.target.files && e.target.files.length) {\r\n      savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n  const onSetEditModeHandler = () => {\r\n    setEditMode(true)\r\n  }\r\n\r\n  const onSubmit = (formData: ProfileFormType) => {\r\n    saveProfile(formData).then(() => {\r\n      setEditMode(false)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <img src=\"https://cdn.wallpapersafari.com/66/25/slYcCE.jpg\" alt=\"itachi content\" width=\"600px\" height=\"200px\" />\r\n      </div>\r\n      <div className={s.descriptionBlock}>\r\n        <ProfileAvatar isAvatar={!profile} photos={profile.photos} />\r\n        <span>------------------</span>\r\n        <div>{isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}</div>\r\n        <span>------------------</span>\r\n        {editMode ? (\r\n          <ProfileForm initialValues={profile} onSubmit={onSubmit} />\r\n        ) : (\r\n          <ProfileDescription profile={profile} isOwner={isOwner} setEditMode={onSetEditModeHandler} />\r\n        )}\r\n        <span>------------------</span>\r\n      </div>\r\n      Status:\r\n      <ProfileStatusUseState status={profileStatus} updateProfileStatus={updateProfileStatus} />\r\n      <span>------------------</span>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Types\r\ntype ProfileInfoPropsType = {\r\n  profile: ProfileType\r\n  profileStatus: string\r\n  updateProfileStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (value: File) => void\r\n  saveProfile: (profile: ProfileFormType) => Promise<void | string>\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPostsCSS_postsBlock__OXPSG\",\"posts\":\"MyPostsCSS_posts__lidQg\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"PostCSS_item__bybZi\"};","import React from 'react'\r\nimport s from './PostCSS.module.css'\r\nimport { Button } from '../../../../common/Button/Button'\r\n\r\nexport const Post: React.FC<PostsType> = (props) => {\r\n  const { id, postText, likesCount, deletePost } = props\r\n\r\n  const deletePostHandler = () => {\r\n    deletePost(id)\r\n  }\r\n\r\n  return (\r\n    <div key={id} className={s.item}>\r\n      <img src=\"https://i.pinimg.com/736x/11/f7/83/11f78374741b89e4dea99e0b6356ee3c.jpg\" alt=\"itachi logo\" />\r\n      {postText}\r\n      <div>\r\n        <span> {likesCount} likes</span>\r\n        <Button name={'x'} callback={deletePostHandler} xType={'delete'} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Types\r\ntype PostsType = {\r\n  id: number\r\n  postText: string\r\n  likesCount: number\r\n  deletePost: (id: number) => void\r\n}\r\n","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { maxLength, minLength, required } from '../../../../utils/validators'\r\nimport { TextArea } from '../../../common/FormsControls/FormsControl'\r\nimport { Button } from '../../../common/Button/Button'\r\n\r\nconst maxLength10 = maxLength(10)\r\nconst minLength2 = minLength(2)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormAddPostDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name={'postText'}\r\n        placeholder={'Enter post text'}\r\n        value={'newPostText'}\r\n        component={TextArea}\r\n        validate={[required, maxLength10, minLength2]}\r\n      />\r\n      <div>\r\n        <Button name={'Add post'} />\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport const AddPostReduxForm = reduxForm<FormAddPostDataType>({ form: 'addPost' })(AddPostForm)\r\n\r\n//Types\r\nexport type FormAddPostDataType = {\r\n  postText: string\r\n}\r\n","import React, { memo } from 'react'\r\nimport s from './MyPostsCSS.module.css'\r\nimport { Post } from './Post/Post'\r\nimport { MapDispatchToPropsType, MapStateToPropsType } from './MyPostsContainer'\r\nimport { AddPostReduxForm, FormAddPostDataType } from './AddPostForm'\r\n\r\nexport const MyPosts: React.FC<MyPostsPropsType> = memo((props) => {\r\n  const { addPost, profilePage, deletePost } = props\r\n\r\n  console.log('render my posts')\r\n\r\n  const postDataMap = profilePage.posts.map((p) => (\r\n    <Post key={p.id} id={p.id} postText={p.postText} likesCount={p.likesCount} deletePost={deletePost} />\r\n  ))\r\n\r\n  const onAddPost = (data: FormAddPostDataType) => {\r\n    addPost(data.postText)\r\n  }\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <div>\r\n        <AddPostReduxForm onSubmit={onAddPost} />\r\n      </div>\r\n      <div className={s.posts}>{postDataMap}</div>\r\n    </div>\r\n  )\r\n})\r\n\r\n//Types\r\ntype MyPostsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","import { InitialProfileReducerStateType, profileActions } from '../profile-reducer/profile-reducer'\r\nimport { MyPosts } from './MyPosts'\r\nimport { connect } from 'react-redux'\r\nimport { RootReducerType } from '../../../../app/store'\r\n\r\nconst { addPost, deletePost } = profileActions\r\n\r\nexport type MapStateToPropsType = {\r\n  profilePage: InitialProfileReducerStateType\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n  addPost: (newPostText: string) => void\r\n  deletePost: (id: number) => void\r\n}\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n  return {\r\n    profilePage: state.profileReducer,\r\n  }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, {\r\n  addPost,\r\n  deletePost,\r\n})(MyPosts)\r\n","import React from 'react'\r\nimport { ProfileInfo } from './ProfileInfo/ProfileInfo'\r\nimport { MyPostsContainer } from './MyPosts/MyPostsContainer'\r\nimport { ProfileType } from './profile-reducer/profile-reducer'\r\nimport { ProfileFormType } from './ProfileInfo/ProfileForm/ProfileForm'\r\n\r\nexport const Profile: React.FC<ProfilePropsType> = (props) => {\r\n  const { profile, profileStatus, updateProfileStatus, isOwner, savePhoto, saveProfile } = props\r\n\r\n  return (\r\n    <div>\r\n      <ProfileInfo\r\n        profile={profile}\r\n        profileStatus={profileStatus}\r\n        updateProfileStatus={updateProfileStatus}\r\n        isOwner={isOwner}\r\n        savePhoto={savePhoto}\r\n        saveProfile={saveProfile}\r\n      />\r\n      <MyPostsContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\n//Types\r\ntype ProfilePropsType = {\r\n  profile: ProfileType\r\n  profileStatus: string\r\n  updateProfileStatus: (status: string) => void\r\n  isOwner: boolean\r\n  savePhoto: (value: File) => void\r\n  saveProfile: (profile: ProfileFormType) => Promise<void | string>\r\n}\r\n","import React, { ComponentType } from 'react'\r\nimport { Profile } from './Profile'\r\nimport { connect } from 'react-redux'\r\nimport {\r\n  getProfileData,\r\n  getProfileStatus,\r\n  profileActions,\r\n  ProfileType,\r\n  savePhoto,\r\n  saveProfile,\r\n  updateProfileStatus,\r\n} from './profile-reducer/profile-reducer'\r\nimport { RootReducerType } from '../../../app/store'\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom'\r\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { getProfile, getStatus } from '../../../app/selectors/profile-selector'\r\nimport { getIsAuth, getUserId } from '../../../app/selectors/auth-selector'\r\nimport { ProfileFormType } from './ProfileInfo/ProfileForm/ProfileForm'\r\n\r\nconst { setUserProfile } = profileActions\r\n\r\nexport class ProfileAPIComponent extends React.Component<ProfileAPIComponentType> {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId\r\n    if (!userId) {\r\n      if (this.props.authorizedUserId !== null) {\r\n        userId = this.props.authorizedUserId\r\n      } else this.props.history.push('/login')\r\n      // userId = '28817'\r\n    }\r\n    this.props.getProfileData(userId)\r\n    this.props.getProfileStatus(userId)\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile()\r\n  }\r\n\r\n  componentDidUpdate(prevProps: ProfileAPIComponentType) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile()\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <Profile {...this.props} isOwner={!this.props.match.params.userId} />\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n  return {\r\n    profile: getProfile(state),\r\n    profileStatus: getStatus(state),\r\n    authorizedUserId: getUserId(state),\r\n    isAuth: getIsAuth(state),\r\n  }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, {\r\n    setUserProfile,\r\n    getProfileData,\r\n    getProfileStatus,\r\n    updateProfileStatus,\r\n    savePhoto,\r\n    saveProfile,\r\n  }),\r\n  withRouter,\r\n  withAuthRedirect,\r\n)(ProfileAPIComponent)\r\n\r\n//Types\r\ntype MapStateToPropsType = {\r\n  profile: ProfileType\r\n  profileStatus: string\r\n  authorizedUserId: string | null\r\n  isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n  setUserProfile: (profile: ProfileType) => void\r\n  getProfileData: (userId: string) => void\r\n  getProfileStatus: (userId: string) => void\r\n  updateProfileStatus: (status: string) => void\r\n  savePhoto: (value: File) => void\r\n  saveProfile: (profile: ProfileFormType) => Promise<void | string>\r\n}\r\ntype ProfileContainerType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MatchParamsType = {\r\n  userId: string\r\n}\r\ntype ProfileAPIComponentType = RouteComponentProps<MatchParamsType> & ProfileContainerType\r\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"Button_button__MpHMn\",\"deleteTask\":\"Button_deleteTask__CEYcg\",\"disabled\":\"Button_disabled__LCeMy\",\"secondary\":\"Button_secondary__+N0o7\",\"default\":\"Button_default__tVev3\",\"red\":\"Button_red__uwCBn\"};","import React, { memo } from 'react'\r\nimport s from './Button.module.css'\r\n\r\nexport const Button: React.FC<ButtonType> = memo((props) => {\r\n  const { name, disabled, callback, className, xType } = props\r\n\r\n  const finalClassName = `\r\n    ${s.button}\r\n    ${xType === 'delete' ? `${s.red} ${s.deleteTask}` : ''} \r\n    ${xType === 'red' ? `${s.red}` : ''} \r\n    ${className ? s.secondary : s.default}\r\n    `\r\n\r\n  const onClickHandler = () => {\r\n    if (callback) callback()\r\n  }\r\n  return (\r\n    <button disabled={disabled} className={finalClassName} onClick={onClickHandler}>\r\n      {name}\r\n    </button>\r\n  )\r\n})\r\n\r\n//Types\r\ntype ButtonType = {\r\n  name: string\r\n  disabled?: boolean\r\n  callback?: () => void\r\n  className?: boolean\r\n  xType?: string\r\n}\r\n","import React, { ComponentType } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { RootReducerType } from '../app/store'\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.authReducer.isAuth,\r\n  }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent = (props: MapStateToPropsType) => {\r\n    const { isAuth, ...restProps } = props\r\n\r\n    if (!isAuth) {\r\n      return <Redirect to={'/login'} />\r\n    }\r\n    return <Component {...(restProps as T)} />\r\n  }\r\n\r\n  return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n//Types\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login-form_container__hXfXO\",\"title\":\"Login-form_title__Ttk5A\",\"formContainer\":\"Login-form_formContainer__bLkgr\",\"inputBox\":\"Login-form_inputBox__ywAm4\",\"checkBox\":\"Login-form_checkBox__qYG5D\",\"submit\":\"Login-form_submit__HfbHD\"};"],"names":["ProfileStatusUseState","props","status","updateProfileStatus","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","_useState4","statusProfile","setStatusProfile","useEffect","deActivateEditMode","_jsx","_Fragment","children","autoFocus","onBlur","value","onChange","e","currentTarget","onKeyDown","key","onDoubleClick","getProfile","state","profileReducer","profile","getContacts","contacts","getStatus","profileStatus","Contacts","useAppSelector","mappedContacts","Object","entries","map","index","_jsxs","ProfileDescription","_ref","isOwner","Button","callback","name","fullName","aboutMe","lookingForAJob","lookingForAJobDescription","ProfileAvatar","isAvatar","photos","Preloader","src","large","user","alt","ContactsForm","useSelector","keys","fieldCreator","concat","Input","reduxForm","form","onSubmit","handleSubmit","error","className","s","summeryError","type","TextArea","ProfileInfo","savePhoto","saveProfile","width","height","target","files","length","ProfileForm","initialValues","formData","then","Post","id","postText","likesCount","deletePost","xType","maxLength10","maxLength","minLength2","minLength","AddPostReduxForm","Field","placeholder","component","validate","required","MyPosts","memo","addPost","profilePage","console","log","postDataMap","posts","p","data","profileActions","MyPostsContainer","connect","Profile","setUserProfile","ProfileAPIComponent","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","userId","this","match","params","authorizedUserId","history","push","getProfileData","getProfileStatus","refreshProfile","prevProps","_objectSpread","React","compose","getUserId","isAuth","getIsAuth","withRouter","withAuthRedirect","disabled","finalClassName","onClick","mapStateToProps","authReducer","Component","restProps","_objectWithoutProperties","_excluded","Redirect","to"],"sourceRoot":""}