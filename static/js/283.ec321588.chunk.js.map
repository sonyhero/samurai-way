{"version":3,"file":"static/js/283.ec321588.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Pages/Login/LoginForm/Login-form.module.scss?6d7f","webpack://samurai-way/./src/components/ui/card/card.module.scss?29d1","components/ui/card/card.tsx","components/Pages/Login/LoginForm/LoginForm.tsx","components/Pages/Login/Login.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.scss?a0e4","components/common/FormsControls/FormsControl.tsx","webpack://samurai-way/./src/components/ui/label/label.module.scss?f473","components/ui/label/label.tsx","webpack://samurai-way/./src/components/ui/textfield/textfield.module.scss?78a8","components/ui/textfield/textfield.tsx","utils/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login-form_container__YVLv9\",\"title\":\"Login-form_title__gW7Un\",\"formContainer\":\"Login-form_formContainer__JB6k-\",\"inputBox\":\"Login-form_inputBox__+OWdN\",\"checkBox\":\"Login-form_checkBox__A6Wmu\",\"error\":\"Login-form_error__Yiy85\",\"submit\":\"Login-form_submit__xTj9K\"};","// extracted by mini-css-extract-plugin\nexport default {\"cardBlock\":\"card_cardBlock__EVa7l\"};","import { FC, ReactNode } from 'react'\r\n\r\nimport s from './card.module.scss'\r\ntype CardProps = {\r\n  children: ReactNode\r\n  className?: string\r\n}\r\n\r\nexport const Card: FC<CardProps> = ({ children, className }) => {\r\n  return <div className={`${s.cardBlock} ${className}`}>{children}</div>\r\n}\r\n","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { CheckBox, fieldCreator, Input } from '../../../common/FormsControls/FormsControl'\r\nimport { required } from '../../../../utils/validators'\r\nimport s from './Login-form.module.scss'\r\nimport { useAppSelector } from '../../../../app/store'\r\nimport { Typography } from '../../../ui/typography'\r\nimport { Button } from '../../../ui/button'\r\nimport { Card } from '../../../ui/card'\r\nimport { getCaptchaUrl } from '../../../../app/selectors/auth-selector'\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType>> = (props) => {\r\n  const captcha = useAppSelector(getCaptchaUrl)\r\n\r\n  return (\r\n    <Card className={s.container}>\r\n      <Typography>\r\n        To log in get registered on{' '}\r\n        <Typography as={'a'} href={'https://social-network.samuraijs.com/'} target={'_blank'} rel=\"noreferrer\">\r\n          this site\r\n        </Typography>\r\n      </Typography>\r\n      <Typography>or use common test account credentials:</Typography>\r\n      <Typography>Email: free@samuraijs.com</Typography>\r\n      <Typography>Password: free</Typography>\r\n      <Typography className={s.title} variant={'large'}>\r\n        Login\r\n      </Typography>\r\n      <form onSubmit={props.handleSubmit} className={s.formContainer}>\r\n        <div className={s.inputBox}>{fieldCreator('email', 'Email', [required], Input)}</div>\r\n        <div className={s.inputBox}>\r\n          {fieldCreator('password', 'Password', [required], Input, { type: 'password' })}\r\n        </div>\r\n        {props.error && <div className={s.error}>{props.error}</div>}\r\n        <div className={s.checkBox}>\r\n          {fieldCreator('rememberMe', '', [], CheckBox, { type: 'checkbox' }, 'Remember Me')}\r\n        </div>\r\n        {/*//--------------------------------------------------------*/}\r\n\r\n        {captcha && <img src={`${captcha}`} alt={'anti-bot captcha'} />}\r\n        {captcha && <div className={s.inputBox}>{fieldCreator('captcha', 'Captcha', [required], Input)}</div>}\r\n\r\n        <Button fullWidth={true} className={s.submit} type={'submit'}>\r\n          Login\r\n        </Button>\r\n      </form>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<LoginFormDataType>({\r\n  form: 'login',\r\n})(LoginForm)\r\n\r\n// Types\r\nexport type LoginFormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { login } from './auth-reducer'\r\nimport { RootReducerType } from '../../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { getIsAuth } from '../../../app/selectors/auth-selector'\r\nimport { LoginFormDataType, LoginReduxForm } from './LoginForm/LoginForm'\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n  const { login, isAuth } = props\r\n\r\n  const onSubmit = (formData: LoginFormDataType) => {\r\n    const { email, password, rememberMe, captcha } = formData\r\n    login(email, password, rememberMe, captcha)\r\n  }\r\n\r\n  return isAuth ? <Redirect to={'/profile'} /> : <LoginReduxForm onSubmit={onSubmit} />\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: getIsAuth(state),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  login,\r\n})(Login)\r\n\r\n//Types\r\nexport type MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype LoginPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fieldName\":\"FormsControls_fieldName__-IoHm\"};","import React from 'react'\r\nimport s from './FormsControls.module.scss'\r\nimport { Field } from 'redux-form'\r\nimport { TextField } from '../../ui/textfield'\r\n\r\nexport const FormControl: React.FC<FormControlType> = (props) => {\r\n  // const { input, meta, children, ...restProps } = props\r\n  const { children } = props\r\n\r\n  return <>{children}</>\r\n}\r\n\r\n// type TextAreaType = TextareaHTMLAttributes<HTMLTextAreaElement>;\r\nexport const TextArea: React.FC<FormControlType> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n\r\n  const error = meta.touched && meta.error ? meta.error : ''\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <TextField {...input} errorMessage={error} {...restProps} />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\n// type InputType = InputHTMLAttributes<HTMLInputElement>\r\nexport const Input: React.FC<FormControlType> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n\r\n  const error = meta.touched && meta.error ? meta.error : ''\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <TextField {...input} errorMessage={error} {...restProps} />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport const CheckBox: React.FC<FormControlType> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\n//Рефакторинг урок 90 - функция используется в компоненте Login\r\nexport const fieldCreator = (\r\n  name: string,\r\n  placeholder: string = '',\r\n  validate: any[],\r\n  component: React.FC<FormControlType>,\r\n  props?: { type: string },\r\n  text: string = '',\r\n) => {\r\n  return (\r\n    <>\r\n        <Field name={name} placeholder={placeholder} component={component} validate={validate} {...props} />\r\n      <div className={s.fieldName}>{text}</div>\r\n    </>\r\n  )\r\n}\r\n\r\n//Types\r\ntype FormControlType = {\r\n  input: {\r\n    name: string\r\n    value: string\r\n  }\r\n  meta: {\r\n    touched?: boolean\r\n    error?: string\r\n  }\r\n  children: React.ReactNode\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"large\":\"label_large__K1a8L\",\"h1\":\"label_h1__Xzt-r\",\"h2\":\"label_h2__zezW3\",\"h3\":\"label_h3__j4W2S\",\"body1\":\"label_body1__4seLF\",\"subtitle1\":\"label_subtitle1__jY6mX\",\"body2\":\"label_body2__wKC-8\",\"subtitle2\":\"label_subtitle2__r0LiD\",\"caption\":\"label_caption__Pd0LU\",\"overline\":\"label_overline__fBM9H\",\"link1\":\"label_link1__MMzFH\",\"link2\":\"label_link2__iaUiD\",\"label\":\"label_label__wXs4j\",\"primary\":\"label_primary__GqUeI\",\"secondary\":\"label_secondary__0NJ9c\",\"disabled\":\"label_disabled__CQcuU\"};","import { ComponentPropsWithoutRef, FC, ReactNode } from 'react'\r\n\r\nimport * as Label from '@radix-ui/react-label'\r\n\r\nimport s from './label.module.scss'\r\n\r\nexport type LabelProps = {\r\n  variant?: 'primary' | 'secondary'\r\n  label?: ReactNode\r\n  disabled?: boolean\r\n} & ComponentPropsWithoutRef<'label'>\r\n\r\nexport const LabelDemo: FC<LabelProps> = ({ variant = 'primary', label, children, disabled, ...rest }) => {\r\n  return (\r\n    <Label.Root {...rest}>\r\n      {label && <div className={`${s.label} ${disabled ? s.disabled : s[variant]} `}>{label}</div>}\r\n      {children}\r\n    </Label.Root>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fieldContainer\":\"textfield_fieldContainer__bVI7E\",\"search\":\"textfield_search__Omr42\",\"field\":\"textfield_field__5EFVR\",\"error\":\"textfield_error__-UlQI\",\"buttonAction\":\"textfield_buttonAction__uDJAG\",\"errorMessage\":\"textfield_errorMessage__r6HGg\"};","import { ChangeEvent, KeyboardEvent, ComponentPropsWithoutRef, forwardRef, useState } from 'react'\r\n\r\nimport { LabelDemo } from '../label'\r\nimport { Typography } from '../typography'\r\n\r\nimport s from './textfield.module.scss'\r\nimport { DeleteIcon, Eye, NotEye, Search } from '../../../assets'\r\n\r\nexport type TextFieldProps = {\r\n  type?: 'default' | 'password' | 'searchType'\r\n  label?: string\r\n  errorMessage?: string | null\r\n  placeholder?: string\r\n  disableValue?: boolean\r\n  value?: string\r\n  onChangeText?: (value: string) => void\r\n  onEnter?: () => void\r\n  onSearchClear?: () => void\r\n  className?: string\r\n} & ComponentPropsWithoutRef<'input'>\r\n\r\nexport const TextField = forwardRef<HTMLInputElement, TextFieldProps>(\r\n  (\r\n    {\r\n      errorMessage,\r\n      label,\r\n      placeholder = 'Some text',\r\n      type = 'default',\r\n      disableValue = false,\r\n      value,\r\n      onEnter,\r\n      onSearchClear,\r\n      onChangeText,\r\n      className,\r\n      ...restProps\r\n    },\r\n    ref,\r\n  ) => {\r\n    const [showPassword, setShowPassword] = useState(false)\r\n\r\n    const finalType = getType(type, showPassword)\r\n\r\n    const inputStyle = (type: 'default' | 'password' | 'searchType' | string) => {\r\n      if (type === 'searchType') {\r\n        return { paddingLeft: '2.56rem', paddingRight: '35px' }\r\n      } else if (type === 'password') {\r\n        return { paddingRight: '35px' }\r\n      } else {\r\n        return {}\r\n      }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      onChangeText?.(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n    const onSearchClearHandler = () => {\r\n      if (onSearchClear) {\r\n        onSearchClear()\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={className}>\r\n        <LabelDemo label={label} variant={'secondary'}>\r\n          <div className={`${s.fieldContainer}`}>\r\n            {type === 'searchType' && (\r\n              <span className={s.search}>\r\n                <Search fill={disableValue ? '#4c4c4c' : '#808080'} />\r\n              </span>\r\n            )}\r\n            <input\r\n              className={`${s.field} ${errorMessage ? s.error : ''}`}\r\n              ref={ref}\r\n              placeholder={placeholder}\r\n              type={finalType}\r\n              disabled={disableValue}\r\n              onChange={onChangeHandler}\r\n              onKeyDown={onKeyPressCallback}\r\n              style={inputStyle(type)}\r\n              value={value}\r\n              {...restProps}\r\n            />\r\n            {type === 'password' && (\r\n              <button\r\n                className={s.buttonAction}\r\n                type={'button'}\r\n                aria-label={'show password'}\r\n                disabled={disableValue}\r\n                onClick={() => setShowPassword((prev) => !prev)}\r\n              >\r\n                {showPassword ? (\r\n                  <Eye fill={disableValue ? '#fff' : '#4c4c4c'} />\r\n                ) : (\r\n                  <NotEye fill={disableValue ? '#fff' : '#4c4c4c'} />\r\n                )}\r\n              </button>\r\n            )}\r\n            {type === 'searchType' && !!value && (\r\n              <button\r\n                className={s.buttonAction}\r\n                type={'button'}\r\n                aria-label={'delete'}\r\n                disabled={disableValue}\r\n                onClick={onSearchClearHandler}\r\n              >\r\n                <DeleteIcon fill={disableValue ? '#4c4c4c' : '#808080'} />\r\n              </button>\r\n            )}\r\n          </div>\r\n          <Typography variant=\"body1\" className={s.errorMessage}>\r\n            {errorMessage}\r\n          </Typography>\r\n        </LabelDemo>\r\n      </div>\r\n    )\r\n  },\r\n)\r\n\r\nfunction getType(type: string, showPassword: boolean) {\r\n  if (type === 'password' && showPassword) {\r\n    return 'text'\r\n  }\r\n\r\n  return type\r\n}\r\n","export const required = (value: string) => {\r\n  return value ? undefined : 'Field is required'\r\n}\r\n\r\nexport const maxLength = (maxLength: number) => (value: string) => {\r\n  return value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n}\r\n\r\nexport const minLength = (minLength: number) => (value: string) => {\r\n  return value && value.length < minLength ? `Min length is ${minLength} symbols` : undefined\r\n}\r\n"],"names":["Card","_ref","children","className","_jsx","concat","s","LoginReduxForm","reduxForm","form","props","captcha","useAppSelector","getCaptchaUrl","_jsxs","Typography","as","href","target","rel","variant","onSubmit","handleSubmit","fieldCreator","required","Input","type","error","CheckBox","src","alt","Button","fullWidth","connect","state","isAuth","getIsAuth","login","Redirect","to","formData","email","password","rememberMe","FormControl","_Fragment","TextArea","input","meta","restProps","_objectWithoutProperties","_excluded","touched","_objectSpread","TextField","errorMessage","_excluded2","_excluded3","name","placeholder","arguments","length","undefined","validate","component","text","Field","LabelDemo","_ref$variant","label","disabled","rest","Label","forwardRef","ref","_ref$placeholder","_ref$type","_ref$disableValue","disableValue","value","onEnter","onSearchClear","onChangeText","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","finalType","getType","Search","fill","onChange","e","currentTarget","onKeyDown","key","style","paddingLeft","paddingRight","inputStyle","onClick","prev","Eye","NotEye","DeleteIcon","maxLength","minLength"],"sourceRoot":""}