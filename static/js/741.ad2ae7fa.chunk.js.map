{"version":3,"file":"static/js/741.ad2ae7fa.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Pages/Dialogs/Dialogs.module.scss?8df5","webpack://samurai-way/./src/components/Pages/Dialogs/DialogItem/DialogsItem.module.scss?4c19","components/Pages/Dialogs/DialogItem/DialogsItem.tsx","components/Pages/Dialogs/Message/Message.tsx","components/Pages/Dialogs/AddMessageForm.tsx","app/selectors/dialogs-selector.ts","components/Pages/Dialogs/DialogsContainer.tsx","components/Pages/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.scss?a0e4","components/common/FormsControls/FormsControl.tsx","webpack://samurai-way/./src/components/ui/label/label.module.scss?f473","components/ui/label/label.tsx","webpack://samurai-way/./src/components/ui/textfield/textfield.module.scss?78a8","components/ui/textfield/textfield.tsx","hoc/withAuthRedirect.tsx","utils/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsBox\":\"Dialogs_dialogsBox__U+mEx\",\"dialogs\":\"Dialogs_dialogs__Tbi+Z\",\"messages\":\"Dialogs_messages__RyWTk\",\"dialogsItems\":\"Dialogs_dialogsItems__b51A0\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogsItem_item__Ztk0Q\",\"activeLink\":\"DialogsItem_activeLink__r47Hu\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport s from './DialogsItem.module.scss'\r\n\r\nexport const DialogItem = (props: DialogItemType) => {\r\n  let path = '/dialogs/' + props.id\r\n  return (\r\n    <div className={s.item}>\r\n      <NavLink to={path} activeClassName={s.activeLink}>\r\n        {props.name}\r\n      </NavLink>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Types\r\ntype DialogItemType = {\r\n  id: number\r\n  name: string\r\n}\r\n","import React from 'react'\r\n\r\nexport const Message = (props: MessageType) => {\r\n  return <div>{props.messageText}</div>\r\n}\r\n\r\n//Types\r\ntype MessageType = {\r\n  id: number\r\n  messageText: string\r\n}\r\n","import React from 'react'\r\nimport { Field, InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { TextArea } from '../../common/FormsControls/FormsControl'\r\nimport { maxLength, minLength, required } from '../../../utils/validators'\r\nimport { Button } from '../../ui/button'\r\n\r\nconst maxLength100 = maxLength(100)\r\nconst minLength1 = minLength(1)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormAddMessageDataType>> = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        name={'messageText'}\r\n        placeholder={'Enter message'}\r\n        value={'newMessageText'}\r\n        component={TextArea}\r\n        validate={[required, maxLength100, minLength1]}\r\n      />\r\n      <Button>Add message</Button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport const AddMessageReduxForm = reduxForm<FormAddMessageDataType>({ form: 'addMessage' })(AddMessageForm)\r\n\r\n//Types\r\ntype FormAddMessageDataType = {\r\n  messageText: string\r\n}\r\n","import { RootReducerType } from '../store'\r\n\r\n// export const getDialogs = (state: RootReducerType) => state.dialogsReducer.dialogs\r\n// export const getMessages = (state: RootReducerType) => state.dialogsReducer.messages\r\n\r\nexport const getDialogsPage = (state: RootReducerType) => state.dialogsReducer\r\n","import { addMessage, InitialDialogsReducerStateType } from './dialogs-reducer'\r\nimport { Dialogs } from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { RootReducerType } from '../../../app/store'\r\nimport { withAuthRedirect } from '../../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { ComponentType } from 'react'\r\nimport { getDialogsPage } from '../../../app/selectors/dialogs-selector'\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n  return {\r\n    dialogsPage: getDialogsPage(state),\r\n  }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n  connect(mapStateToProps, {\r\n    addMessage,\r\n  }),\r\n  withAuthRedirect,\r\n)(Dialogs)\r\n//Types\r\nexport type MapDispatchToPropsType = {\r\n  addMessage: (messageText: string) => void\r\n}\r\nexport type MapStateToPropsType = {\r\n  dialogsPage: InitialDialogsReducerStateType\r\n}\r\n","import React from 'react'\r\nimport s from './Dialogs.module.scss'\r\nimport { DialogItem } from './DialogItem/DialogsItem'\r\nimport { Message } from './Message/Message'\r\nimport { MapDispatchToPropsType, MapStateToPropsType } from './DialogsContainer'\r\nimport { AddMessageReduxForm } from './AddMessageForm'\r\nimport { useAppSelector } from '../../../app/store'\r\nimport { getIsAuth } from '../../../app/selectors/auth-selector'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n  const isAuth = useAppSelector(getIsAuth)\r\n\r\n  const { addMessage, dialogsPage } = props\r\n\r\n  const dialogsDataMap = dialogsPage.dialogs.map((d) => <DialogItem key={d.id} name={d.name} id={d.id} />)\r\n\r\n  const messagesDataMap = dialogsPage.messages.map((m) => <Message key={m.id} messageText={m.messageText} id={m.id} />)\r\n\r\n  const onAddMessage = (data: { messageText: string }) => {\r\n    addMessage(data.messageText)\r\n  }\r\n\r\n  return !isAuth ? (\r\n    <Redirect to={'/login'} />\r\n  ) : (\r\n    <div className={s.dialogsBox}>\r\n      Dialogs\r\n      <div className={s.dialogs}>\r\n        <div className={s.messages}>\r\n          {messagesDataMap}\r\n          <AddMessageReduxForm onSubmit={onAddMessage} />\r\n        </div>\r\n        <div className={s.dialogsItems}>{dialogsDataMap}</div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n//Types\r\ntype DialogsPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fieldName\":\"FormsControls_fieldName__-IoHm\"};","import React from 'react'\r\nimport s from './FormsControls.module.scss'\r\nimport { Field } from 'redux-form'\r\nimport { TextField } from '../../ui/textfield'\r\n\r\nexport const FormControl: React.FC<FormControlType> = (props) => {\r\n  // const { input, meta, children, ...restProps } = props\r\n  const { children } = props\r\n\r\n  return <>{children}</>\r\n}\r\n\r\n// type TextAreaType = TextareaHTMLAttributes<HTMLTextAreaElement>;\r\nexport const TextArea: React.FC<FormControlType> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n\r\n  const error = meta.touched && meta.error ? meta.error : ''\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <TextField {...input} errorMessage={error} {...restProps} />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\n// type InputType = InputHTMLAttributes<HTMLInputElement>\r\nexport const Input: React.FC<FormControlType> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n\r\n  const error = meta.touched && meta.error ? meta.error : ''\r\n\r\n  return (\r\n    <FormControl {...props}>\r\n      <TextField {...input} errorMessage={error} {...restProps} />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\nexport const CheckBox: React.FC<FormControlType> = (props) => {\r\n  const { input, meta, ...restProps } = props\r\n  return (\r\n    <FormControl {...props}>\r\n      <input {...input} {...restProps} />\r\n    </FormControl>\r\n  )\r\n}\r\n\r\n//Рефакторинг урок 90 - функция используется в компоненте Login\r\nexport const fieldCreator = (\r\n  name: string,\r\n  placeholder: string = '',\r\n  validate: any[],\r\n  component: React.FC<FormControlType>,\r\n  props?: { type: string },\r\n  text: string = '',\r\n) => {\r\n  return (\r\n    <>\r\n        <Field name={name} placeholder={placeholder} component={component} validate={validate} {...props} />\r\n      <div className={s.fieldName}>{text}</div>\r\n    </>\r\n  )\r\n}\r\n\r\n//Types\r\ntype FormControlType = {\r\n  input: {\r\n    name: string\r\n    value: string\r\n  }\r\n  meta: {\r\n    touched?: boolean\r\n    error?: string\r\n  }\r\n  children: React.ReactNode\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"large\":\"label_large__K1a8L\",\"h1\":\"label_h1__Xzt-r\",\"h2\":\"label_h2__zezW3\",\"h3\":\"label_h3__j4W2S\",\"body1\":\"label_body1__4seLF\",\"subtitle1\":\"label_subtitle1__jY6mX\",\"body2\":\"label_body2__wKC-8\",\"subtitle2\":\"label_subtitle2__r0LiD\",\"caption\":\"label_caption__Pd0LU\",\"overline\":\"label_overline__fBM9H\",\"link1\":\"label_link1__MMzFH\",\"link2\":\"label_link2__iaUiD\",\"label\":\"label_label__wXs4j\",\"primary\":\"label_primary__GqUeI\",\"secondary\":\"label_secondary__0NJ9c\",\"disabled\":\"label_disabled__CQcuU\"};","import { ComponentPropsWithoutRef, FC, ReactNode } from 'react'\r\n\r\nimport * as Label from '@radix-ui/react-label'\r\n\r\nimport s from './label.module.scss'\r\n\r\nexport type LabelProps = {\r\n  variant?: 'primary' | 'secondary'\r\n  label?: ReactNode\r\n  disabled?: boolean\r\n} & ComponentPropsWithoutRef<'label'>\r\n\r\nexport const LabelDemo: FC<LabelProps> = ({ variant = 'primary', label, children, disabled, ...rest }) => {\r\n  return (\r\n    <Label.Root {...rest}>\r\n      {label && <div className={`${s.label} ${disabled ? s.disabled : s[variant]} `}>{label}</div>}\r\n      {children}\r\n    </Label.Root>\r\n  )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"fieldContainer\":\"textfield_fieldContainer__bVI7E\",\"search\":\"textfield_search__Omr42\",\"field\":\"textfield_field__5EFVR\",\"error\":\"textfield_error__-UlQI\",\"buttonAction\":\"textfield_buttonAction__uDJAG\",\"errorMessage\":\"textfield_errorMessage__r6HGg\"};","import { ChangeEvent, KeyboardEvent, ComponentPropsWithoutRef, forwardRef, useState } from 'react'\r\n\r\nimport { LabelDemo } from '../label'\r\nimport { Typography } from '../typography'\r\n\r\nimport s from './textfield.module.scss'\r\nimport { DeleteIcon, Eye, NotEye, Search } from '../../../assets'\r\n\r\nexport type TextFieldProps = {\r\n  type?: 'default' | 'password' | 'searchType'\r\n  label?: string\r\n  errorMessage?: string | null\r\n  placeholder?: string\r\n  disableValue?: boolean\r\n  value?: string\r\n  onChangeText?: (value: string) => void\r\n  onEnter?: () => void\r\n  onSearchClear?: () => void\r\n  className?: string\r\n} & ComponentPropsWithoutRef<'input'>\r\n\r\nexport const TextField = forwardRef<HTMLInputElement, TextFieldProps>(\r\n  (\r\n    {\r\n      errorMessage,\r\n      label,\r\n      placeholder = 'Some text',\r\n      type = 'default',\r\n      disableValue = false,\r\n      value,\r\n      onEnter,\r\n      onSearchClear,\r\n      onChangeText,\r\n      className,\r\n      ...restProps\r\n    },\r\n    ref,\r\n  ) => {\r\n    const [showPassword, setShowPassword] = useState(false)\r\n\r\n    const finalType = getType(type, showPassword)\r\n\r\n    const inputStyle = (type: 'default' | 'password' | 'searchType' | string) => {\r\n      if (type === 'searchType') {\r\n        return { paddingLeft: '2.56rem', paddingRight: '35px' }\r\n      } else if (type === 'password') {\r\n        return { paddingRight: '35px' }\r\n      } else {\r\n        return {}\r\n      }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n      onChangeText?.(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n      onEnter && e.key === 'Enter' && onEnter()\r\n    }\r\n    const onSearchClearHandler = () => {\r\n      if (onSearchClear) {\r\n        onSearchClear()\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className={className}>\r\n        <LabelDemo label={label} variant={'secondary'}>\r\n          <div className={`${s.fieldContainer}`}>\r\n            {type === 'searchType' && (\r\n              <span className={s.search}>\r\n                <Search fill={disableValue ? '#4c4c4c' : '#808080'} />\r\n              </span>\r\n            )}\r\n            <input\r\n              className={`${s.field} ${errorMessage ? s.error : ''}`}\r\n              ref={ref}\r\n              placeholder={placeholder}\r\n              type={finalType}\r\n              disabled={disableValue}\r\n              onChange={onChangeHandler}\r\n              onKeyDown={onKeyPressCallback}\r\n              style={inputStyle(type)}\r\n              value={value}\r\n              {...restProps}\r\n            />\r\n            {type === 'password' && (\r\n              <button\r\n                className={s.buttonAction}\r\n                type={'button'}\r\n                aria-label={'show password'}\r\n                disabled={disableValue}\r\n                onClick={() => setShowPassword((prev) => !prev)}\r\n              >\r\n                {showPassword ? (\r\n                  <Eye fill={disableValue ? '#fff' : '#4c4c4c'} />\r\n                ) : (\r\n                  <NotEye fill={disableValue ? '#fff' : '#4c4c4c'} />\r\n                )}\r\n              </button>\r\n            )}\r\n            {type === 'searchType' && !!value && (\r\n              <button\r\n                className={s.buttonAction}\r\n                type={'button'}\r\n                aria-label={'delete'}\r\n                disabled={disableValue}\r\n                onClick={onSearchClearHandler}\r\n              >\r\n                <DeleteIcon fill={disableValue ? '#4c4c4c' : '#808080'} />\r\n              </button>\r\n            )}\r\n          </div>\r\n          <Typography variant=\"body1\" className={s.errorMessage}>\r\n            {errorMessage}\r\n          </Typography>\r\n        </LabelDemo>\r\n      </div>\r\n    )\r\n  },\r\n)\r\n\r\nfunction getType(type: string, showPassword: boolean) {\r\n  if (type === 'password' && showPassword) {\r\n    return 'text'\r\n  }\r\n\r\n  return type\r\n}\r\n","import React, { ComponentType } from 'react'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { RootReducerType } from '../app/store'\r\nimport { connect } from 'react-redux'\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: state.authReducer.isAuth,\r\n  }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n  const RedirectComponent = (props: MapStateToPropsType) => {\r\n    const { isAuth, ...restProps } = props\r\n\r\n    if (!isAuth) {\r\n      return <Redirect to={'/login'} />\r\n    }\r\n    return <Component {...(restProps as T)} />\r\n  }\r\n\r\n  return connect(mapStateToProps)(RedirectComponent)\r\n}\r\n\r\n//Types\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n","export const required = (value: string) => {\r\n  return value ? undefined : 'Field is required'\r\n}\r\n\r\nexport const maxLength = (maxLength: number) => (value: string) => {\r\n  return value && value.length > maxLength ? `Max length is ${maxLength} symbols` : undefined\r\n}\r\n\r\nexport const minLength = (minLength: number) => (value: string) => {\r\n  return value && value.length < minLength ? `Min length is ${minLength} symbols` : undefined\r\n}\r\n"],"names":["DialogItem","props","path","id","_jsx","className","s","children","NavLink","to","activeClassName","name","Message","messageText","maxLength100","maxLength","minLength1","minLength","AddMessageReduxForm","reduxForm","form","_jsxs","onSubmit","handleSubmit","Field","placeholder","value","component","TextArea","validate","required","Button","getDialogsPage","state","dialogsReducer","compose","connect","dialogsPage","addMessage","withAuthRedirect","isAuth","useAppSelector","getIsAuth","dialogsDataMap","dialogs","map","d","messagesDataMap","messages","m","data","Redirect","FormControl","_Fragment","input","meta","restProps","_objectWithoutProperties","_excluded","error","touched","_objectSpread","TextField","errorMessage","Input","_excluded2","CheckBox","_excluded3","fieldCreator","arguments","length","undefined","text","LabelDemo","_ref","_ref$variant","variant","label","disabled","rest","Label","concat","forwardRef","ref","_ref$placeholder","_ref$type","type","_ref$disableValue","disableValue","onEnter","onSearchClear","onChangeText","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","finalType","getType","Search","fill","onChange","e","currentTarget","onKeyDown","key","style","paddingLeft","paddingRight","inputStyle","onClick","prev","Eye","NotEye","DeleteIcon","Typography","mapStateToProps","authReducer","Component"],"sourceRoot":""}