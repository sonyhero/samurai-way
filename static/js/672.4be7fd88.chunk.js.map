{"version":3,"file":"static/js/672.4be7fd88.chunk.js","mappings":"4OACA,EAA4B,8BAA5B,EAAkE,0BAAlE,EAA4G,kCAA5G,EAAyJ,6BAAzJ,EAAiM,6BAAjM,EAAsO,0BAAtO,EAAyQ,2B,oBCAzQ,EAA4B,wB,UCOfA,EAAsB,SAAHC,GAAiC,IAA3BC,EAAQD,EAARC,SAAUC,EAASF,EAATE,UAC9C,OAAOC,EAAAA,EAAAA,KAAA,OAAKD,UAAS,GAAAE,OAAKC,EAAW,KAAAD,OAAIF,GAAYD,SAAEA,GACzD,ECwCaK,GAAiBC,EAAAA,EAAAA,GAA6B,CACzDC,KAAM,SADsBD,EAvCoC,SAACE,GACjE,IAAMC,GAAUC,EAAAA,EAAAA,IAAeC,EAAAA,IAE/B,OACEC,EAAAA,EAAAA,MAACd,EAAI,CAACG,UAAWG,EAAYJ,SAAA,EAC3BY,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAAAb,SAAA,CAAC,8BACkB,KAC5BE,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACC,GAAI,IAAKC,KAAM,wCAAyCC,OAAQ,SAAUC,IAAI,aAAYjB,SAAC,kBAIzGE,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAAAb,SAAC,6CACZE,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAAAb,SAAC,+BACZE,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAAAb,SAAC,oBACZE,EAAAA,EAAAA,KAACW,EAAAA,EAAU,CAACZ,UAAWG,EAASc,QAAS,QAAQlB,SAAC,WAGlDY,EAAAA,EAAAA,MAAA,QAAMO,SAAUX,EAAMY,aAAcnB,UAAWG,EAAgBJ,SAAA,EAC7DE,EAAAA,EAAAA,KAAA,OAAKD,UAAWG,EAAWJ,UAAEqB,EAAAA,EAAAA,IAAa,QAAS,QAAS,CAACC,EAAAA,IAAWC,EAAAA,OACxErB,EAAAA,EAAAA,KAAA,OAAKD,UAAWG,EAAWJ,UACxBqB,EAAAA,EAAAA,IAAa,WAAY,WAAY,CAACC,EAAAA,IAAWC,EAAAA,GAAO,CAAEC,KAAM,eAElEhB,EAAMiB,QAASvB,EAAAA,EAAAA,KAAA,OAAKD,UAAWG,EAAQJ,SAAEQ,EAAMiB,SAChDvB,EAAAA,EAAAA,KAAA,OAAKD,UAAWG,EAAWJ,UACxBqB,EAAAA,EAAAA,IAAa,aAAc,GAAI,GAAIK,EAAAA,GAAU,CAAEF,KAAM,YAAc,iBAIrEf,IAAWP,EAAAA,EAAAA,KAAA,OAAKyB,IAAG,GAAAxB,OAAKM,GAAWmB,IAAK,qBACxCnB,IAAWP,EAAAA,EAAAA,KAAA,OAAKD,UAAWG,EAAWJ,UAAEqB,EAAAA,EAAAA,IAAa,UAAW,UAAW,CAACC,EAAAA,IAAWC,EAAAA,OAExFrB,EAAAA,EAAAA,KAAC2B,EAAAA,EAAM,CAACC,WAAW,EAAM7B,UAAWG,EAAUoB,KAAM,SAASxB,SAAC,eAMtE,IC7BA,EAZkB,WAChB,IAAM+B,GAASrB,EAAAA,EAAAA,IAAesB,EAAAA,IACxBC,GAAWC,EAAAA,EAAAA,MAOjB,OAAOH,GAAS7B,EAAAA,EAAAA,KAACiC,EAAAA,GAAQ,CAACC,GAAI,cAAiBlC,EAAAA,EAAAA,KAACG,EAAc,CAACc,SAL9C,SAACkB,GAChB,IAAQC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,SAAUC,EAAwBH,EAAxBG,WAAY/B,EAAY4B,EAAZ5B,QACrCwB,GAASQ,EAAAA,EAAAA,IAAMH,EAAOC,EAAUC,EAAY/B,GAC9C,GAGF,C","sources":["webpack://samurai-way/./src/components/Pages/Login/ui/LoginForm/Login-form.module.scss?33ea","webpack://samurai-way/./src/components/ui/card/card.module.scss?29d1","components/ui/card/card.tsx","components/Pages/Login/ui/LoginForm/LoginForm.tsx","components/Pages/Login/ui/LoginPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login-form_container__Tetxo\",\"title\":\"Login-form_title__W4gvt\",\"formContainer\":\"Login-form_formContainer__DVwZG\",\"inputBox\":\"Login-form_inputBox__fEbuZ\",\"checkBox\":\"Login-form_checkBox__qwKb5\",\"error\":\"Login-form_error__9uYJy\",\"submit\":\"Login-form_submit__1bQmG\"};","// extracted by mini-css-extract-plugin\nexport default {\"cardBlock\":\"card_cardBlock__EVa7l\"};","import { FC, ReactNode } from 'react'\r\n\r\nimport s from './card.module.scss'\r\ntype CardProps = {\r\n  children: ReactNode\r\n  className?: string\r\n}\r\n\r\nexport const Card: FC<CardProps> = ({ children, className }) => {\r\n  return <div className={`${s.cardBlock} ${className}`}>{children}</div>\r\n}\r\n","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { CheckBox, fieldCreator, Input } from '../../../../forms-controls/FormsControl'\r\nimport { required } from '../../../../../utils/validators'\r\nimport s from './Login-form.module.scss'\r\nimport { useAppSelector } from '../../../../../app/store'\r\nimport { Typography } from '../../../../ui/typography'\r\nimport { Button } from '../../../../ui/button'\r\nimport { Card } from '../../../../ui/card'\r\nimport { getCaptchaUrl } from '../../../../../app/model/selectors/auth-selector'\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType>> = (props) => {\r\n  const captcha = useAppSelector(getCaptchaUrl)\r\n\r\n  return (\r\n    <Card className={s.container}>\r\n      <Typography>\r\n        To log in get registered on{' '}\r\n        <Typography as={'a'} href={'https://social-network.samuraijs.com/'} target={'_blank'} rel=\"noreferrer\">\r\n          this site\r\n        </Typography>\r\n      </Typography>\r\n      <Typography>or use common test account credentials:</Typography>\r\n      <Typography>Email: free@samuraijs.com</Typography>\r\n      <Typography>Password: free</Typography>\r\n      <Typography className={s.title} variant={'large'}>\r\n        Login\r\n      </Typography>\r\n      <form onSubmit={props.handleSubmit} className={s.formContainer}>\r\n        <div className={s.inputBox}>{fieldCreator('email', 'Email', [required], Input)}</div>\r\n        <div className={s.inputBox}>\r\n          {fieldCreator('password', 'Password', [required], Input, { type: 'password' })}\r\n        </div>\r\n        {props.error && <div className={s.error}>{props.error}</div>}\r\n        <div className={s.checkBox}>\r\n          {fieldCreator('rememberMe', '', [], CheckBox, { type: 'checkbox' }, 'Remember Me')}\r\n        </div>\r\n        {/*//--------------------------------------------------------*/}\r\n\r\n        {captcha && <img src={`${captcha}`} alt={'anti-bot captcha'} />}\r\n        {captcha && <div className={s.inputBox}>{fieldCreator('captcha', 'Captcha', [required], Input)}</div>}\r\n\r\n        <Button fullWidth={true} className={s.submit} type={'submit'}>\r\n          Login\r\n        </Button>\r\n      </form>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<LoginFormDataType>({\r\n  form: 'login',\r\n})(LoginForm)\r\n\r\n// Types\r\nexport type LoginFormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string\r\n}\r\n","import React from 'react'\r\nimport { login } from '../model/auth-reducer'\r\nimport { useAppDispatch, useAppSelector } from '../../../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { getIsAuth } from '../../../../app/model/selectors/auth-selector'\r\nimport { LoginFormDataType, LoginReduxForm } from './LoginForm/LoginForm'\r\n\r\nconst LoginPage = () => {\r\n  const isAuth = useAppSelector(getIsAuth)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const onSubmit = (formData: LoginFormDataType) => {\r\n    const { email, password, rememberMe, captcha } = formData\r\n    dispatch(login(email, password, rememberMe, captcha))\r\n  }\r\n\r\n  return isAuth ? <Redirect to={'/profile'} /> : <LoginReduxForm onSubmit={onSubmit} />\r\n}\r\n\r\nexport default LoginPage\r\n"],"names":["Card","_ref","children","className","_jsx","concat","s","LoginReduxForm","reduxForm","form","props","captcha","useAppSelector","getCaptchaUrl","_jsxs","Typography","as","href","target","rel","variant","onSubmit","handleSubmit","fieldCreator","required","Input","type","error","CheckBox","src","alt","Button","fullWidth","isAuth","getIsAuth","dispatch","useAppDispatch","Redirect","to","formData","email","password","rememberMe","login"],"sourceRoot":""}