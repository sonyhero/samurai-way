{"version":3,"file":"static/js/890.3066b7cc.chunk.js","mappings":"gLAeMA,GAAQC,EAAAA,EAAAA,aAA2C,SAACC,EAAOC,GAC/D,OACEC,EAAAA,EAAAA,eAACC,EAAAA,GAAUC,OAAXC,EAAAA,EAAAA,GAAA,GACML,EAFR,CAGIM,IAAKL,EACLM,YAAc,SAAAC,GAAU,IAAAC,EACtB,QAAAA,EAAAT,EAAMO,mBAAN,IAAAE,GAAAA,EAAAC,KAAAV,EAAoBQ,IAEfA,EAAMG,kBAAoBH,EAAMI,OAAS,GAAGJ,EAAMK,gB,QAUzDC,EAAOhB,C,8VCjCb,SAASiB,EAAMC,EAAfC,GAAoE,IAAAC,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAArCG,EAADF,EAAC,GAAKG,EAANH,EAAC,GAC7B,OAAOI,KAAKF,IAAIC,EAAKC,KAAKD,IAAID,EAAKJ,G,kKCQrC,IAMMO,GAAiBC,EAAAA,EAAAA,aACrB,SAACxB,EAAOC,GACN,OACEwB,EAAAA,EAAAA,eAACC,EAAAA,GAAUC,MAAXC,EAAAA,EAAAA,GAAA,GACM5B,EAFR,CAGIM,IAAKL,EACL4B,OAAKC,EAAAA,EAAAA,GAAA,CAEHC,SAAU,WACVC,OAAQ,EACRC,MAAO,EACPC,OAAQ,EACRC,QAAS,EACTC,QAAS,EACTC,SAAU,SACVC,KAAM,mBACNC,WAAY,SACZC,SAAU,UACPxC,EAAM6B,S,0iBCHbY,EAAY,CAAC,IAAK,QAAS,UAAW,aACtCC,EAAiB,CAAC,IAAK,SAMvBC,EAAc,SAGpBC,GAA2DC,EAAAA,EAAAA,GAGzDF,GAHFG,GAAA3B,EAAAA,EAAAA,GAAAyB,EAAA,GAAOG,EAADD,EAAC,GAAYE,EAAbF,EAAC,GAA2BG,EAA5BH,EAAC,GAMPI,GAAiDC,EAAAA,EAAAA,GAAmBR,EAAa,CAC/EM,EACAG,EAAAA,KAFFC,GAAAlC,EAAAA,EAAAA,GAAA+B,EAAA,GAAOI,EAADD,EAAC,GAIDE,IAJAF,EAAC,IAIgBD,EAAAA,EAAAA,OAoBvBI,GAA2CF,EAAwCX,GAAnFc,IAAAtC,EAAAA,EAAAA,GAAAqC,GAAA,GAAOE,GAADD,GAAC,GAAgBE,GAAjBF,GAAC,GAQPG,GACEN,EAAqDX,GADvDkB,IAAA1C,EAAAA,EAAAA,GAAAyC,GAAA,GAAOE,GAADD,GAAC,GAA6BE,GAA9BF,GAAC,GAkBDG,GAAiC,SAAAhE,GACrC,IACEiE,EAaEjE,EAdJ,cAEEkE,EAYElE,EAdJ,SAGQmE,EAWJnE,EAXFoE,KACAC,EAUErE,EAdJ,YAKEsE,EASEtE,EAdJ,aAMSuE,EAQLvE,EARFgB,MACAwD,EAOExE,EAdJ,aAQEyE,EAMEzE,EAdJ,cASE0E,EAKE1E,EAdJ,IAUE2E,EAIE3E,EAdJ,KAWE4E,EAGE5E,EAdJ,aAYE6E,EAEE7E,EAdJ,SAaE8E,EACE9E,EAdJ,SAeM+E,EAAcxB,GAAeU,GACnCe,GAA8BC,EAAAA,EAAAA,UAA4C,MAA1EC,GAAA/D,EAAAA,EAAAA,GAAA6D,EAAA,GAAOG,EAADD,EAAC,GAASE,EAAVF,EAAC,GACPG,GAAkCJ,EAAAA,EAAAA,UAA0C,MAA5EK,GAAAnE,EAAAA,EAAAA,GAAAkE,EAAA,GAAOE,EAADD,EAAC,GAAWE,EAAZF,EAAC,GACPG,GAAwDR,EAAAA,EAAAA,WAAe,GAAvES,GAAAvE,EAAAA,EAAAA,GAAAsE,EAAA,GAAOE,EAADD,EAAC,GAAsBE,EAAvBF,EAAC,GACDG,GAAYC,EAAAA,EAAAA,IAAapB,GAC/BqB,GAAgCC,EAAAA,EAAAA,GAAqB,CACnDC,KAAM9B,EACN+B,YAAa7B,EACb8B,SAAU7B,IAHZ8B,GAAAjF,EAAAA,EAAAA,GAAA4E,EAAA,GAAAM,EAAAD,EAAA,GAAOhC,OAAI,IAAAiC,GAALA,EAAeC,EAAfF,EAAC,GAKPG,GAA0BP,EAAAA,EAAAA,GAAqB,CAC7CC,KAAM1B,EACN2B,YAAa1B,EACb2B,SAAU1B,IAHZ+B,GAAArF,EAAAA,EAAAA,GAAAoF,EAAA,GAAOvF,EAADwF,EAAC,GAAOC,EAARD,EAAC,GAKDE,GAA2BC,EAAAA,EAAAA,QAA8C,MAGzEC,GAAgBzB,GAAU0B,QAAQ1B,EAAQ2B,QAAQ,SACxDC,GAAgD9B,EAAAA,EAAAA,UAAe,IAAI+B,KAAnEC,GAAA9F,EAAAA,EAAAA,GAAA4F,EAAA,GAAOG,EAADD,EAAC,GAAkBE,EAAnBF,EAAC,GAODG,EAAkBC,MAAMC,KAAKJ,GAChCK,KAAK,SAAAC,GAAD,OAAYA,EAAOxH,MAAMgB,KADR,IAErByG,KAAK,KAER,OACEC,EAAAA,EAAAA,eAACC,EAAAA,GAAyB5C,GACxB2C,EAAAA,EAAAA,eAAChE,GAFL,CAGMoB,SAAUA,EACV8C,MAAO3D,EACPkB,QAASA,EACT0C,gBAAiBzC,EACjBG,UAAWA,EACXuC,kBAAmBtC,EACnBG,qBAAsBA,EACtBoC,6BAA8BnC,EAC9BoC,WAAWC,EAAAA,EAAAA,KACXjH,MAAOA,EACPyD,cAAegC,EACfrC,KAAMA,EACNE,aAAcgC,EACd5B,IAAKmB,EACLa,yBAA0BA,EAC1B7B,SAAUA,IAEV6C,EAAAA,EAAAA,eAAC3E,EAAWmF,SAlBd,CAkBuBN,MAAO3D,IAC1ByD,EAAAA,EAAAA,eAAC5D,GADH,CAEI8D,MAAO5H,EAAMiE,cACbkE,mBAAmBC,EAAAA,EAAAA,cAAmB,SAAAZ,GACpCL,GAAqB,SAAAkB,GAAD,OAAU,IAAIrB,IAAIqB,GAAMC,IAAId,EAA7B,G,GAClB,IACHe,sBAAsBH,EAAAA,EAAAA,cAAmB,SAAAZ,GACvCL,GAAqB,SAAAkB,GACnB,IAAMG,EAAa,IAAIxB,IAAIqB,GAE3B,OADAG,EAAWC,OAAOjB,GACXgB,C,MAER,KAEFtE,IAIJ0C,GACCc,EAAAA,EAAAA,eAACgB,GAlBD,CAmBEC,IAAKvB,EACL,iBACAtC,SAAUA,EACV8D,UAAW,EACXjE,KAAMA,EACNC,aAAcA,EACd5D,MAAOA,EAEPmF,SAAW,SAAA3F,GAAD,OAAWiG,EAASjG,EAAMqI,OAAO7H,MAT7C,EAUE6D,SAAUA,QAECiE,IAAV9H,GAAsB0G,EAAAA,EAAAA,eAZzB,UAYiC1G,MAAM,KAAQ,KAC5CqG,MAAMC,KAAKJ,IAEZ,M,EAYN6B,GAAe,gBAMfC,IAAgBC,EAAAA,EAAAA,aACpB,SAACjJ,EAAwCC,GACvC,IAAQgE,EAAqDjE,EAA7D,c,EAA6DA,EAAvD6E,SAAiBA,OAAQ,IAAAqE,GAAzBA,EAAsCC,GAAHC,EAAAA,EAAAA,GAAoBpJ,EAA7DqJ,GACMtE,EAAcxB,GAAeU,GAC7BqF,EAAU3F,GAAiBoF,GAAc9E,GACzCsF,EAAaD,EAAQzE,UAAYA,EACjC2E,GAAeC,EAAAA,EAAAA,GAAgBxJ,EAAcqJ,EAAQzB,iBACrD6B,EAAW1G,EAAciB,GAE/B0F,EAA2DC,IAAoB,SAAAC,GAC7E,IAAMC,EAAeJ,IAAWK,QAAQ,SAAAC,GAAD,OAAWA,EAAKnF,QAAlC,IACfoF,EAAcH,EAAaI,MAAM,SAAAF,GAAD,OAAUA,EAAKhJ,QAAUsI,EAAQtI,KAAnD,IACdmJ,EAAWC,GAAaN,EAAcD,EAAQI,QACnCnB,IAAbqB,GACFb,EAAQ7E,cAAc0F,EAASnJ,M,IALnCqJ,GAAAlJ,EAAAA,EAAAA,GAAAwI,EAAA,GAAOW,EAADD,EAAC,GAAWE,EAAZF,EAAC,GAAkCG,EAAnCH,EAAC,GASDI,EAAa,WACZlB,IACHD,EAAQhF,cAAa,GAErBkG,I,EAIJ,OACE9C,EAAAA,EAAAA,eAACgD,EAAAA,IADHC,EAAAA,EAAAA,GAAA,CAC0BC,SAAA,GAAY7F,IAClC2C,EAAAA,EAAAA,eAACmD,EAAAA,GAAUC,QADbH,EAAAA,EAAAA,GAAA,CAEII,KAAK,SACLC,KAAK,WACL,gBAAe1B,EAAQtB,UACvB,gBAAesB,EAAQlF,KACvB,gBAAekF,EAAQxE,SACvB,oBAAkB,OAClBJ,IAAK4E,EAAQ5E,IACb,aAAY4E,EAAQlF,KAAO,OAAS,SACpCS,SAAU0E,EACV,gBAAeA,EAAa,QAAKT,EACjC,wBAAoCA,IAAlBQ,EAAQtI,MAAsB,QAAK8H,GACjDK,EAZN,CAaE7I,IAAKkJ,EAELyB,SAASC,EAAAA,EAAAA,GAAqB/B,EAAa8B,SAAU,SAAAzK,GAMnDA,EAAM2K,cAAcC,O,IAEtBC,eAAeH,EAAAA,EAAAA,GAAqB/B,EAAakC,eAAgB,SAAA7K,GAG/D,IAAMqI,EAASrI,EAAMqI,OACjBA,EAAOyC,kBAAkB9K,EAAM+K,YACjC1C,EAAO2C,sBAAsBhL,EAAM+K,WAKhB,IAAjB/K,EAAMsK,SAAkC,IAAlBtK,EAAMiL,UAC9BhB,IACAnB,EAAQ5C,yBAAyBgF,QAAU,CACzCC,EAAGrK,KAAKsK,MAAMpL,EAAMqL,OACpBC,EAAGxK,KAAKsK,MAAMpL,EAAMuL,QAGtBvL,EAAMK,iB,IAGVmL,WAAWd,EAAAA,EAAAA,GAAqB/B,EAAa6C,WAAY,SAAAxL,GACvD,IAAMyL,EAAsC,KAAtB3B,EAAUoB,QACVlL,EAAMiL,SAAWjL,EAAM0L,QAAU1L,EAAM2L,SAClB,IAArB3L,EAAMmI,IAAIyD,QAAc7B,EAAsB/J,EAAMmI,KACtEsD,GAA+B,MAAdzL,EAAMmI,KACvBlG,EAAU4J,SAAS7L,EAAMmI,OAC3B8B,IACAjK,EAAMK,iB,WAedyL,GAAa,cAQbC,IAActD,EAAAA,EAAAA,aAClB,SAACjJ,EAAsCC,GAErC,IAAQgE,EAA0EjE,EAAlF,cAAyCkE,GAAyClE,EAAlF,UAAkFA,EAAlF,MAAkFA,EAAlF,UAAmDwM,EAA+BxM,EAAlF,YAAmEyM,GAAHrD,EAAAA,EAAAA,GAAkBpJ,EAAlF0M,GACMpD,EAAU3F,GAAiB2I,GAAYrI,GACrC8D,EAAiCuB,EAAzC,6BACMqD,OAA2B7D,IAAb5E,EACdsF,GAAeC,EAAAA,EAAAA,GAAgBxJ,EAAcqJ,EAAQxB,mBAM3D,OAJA8E,EAAAA,EAAAA,IAAgB,WACd7E,EAA6B4E,E,GAC5B,CAAC5E,EAA8B4E,KAGhCjF,EAAAA,EAAAA,eAACmD,EAAAA,GAAUlJ,MAAXgJ,EAAAA,EAAAA,GAAA,GACM8B,EAFR,CAGInM,IAAKkJ,EAGL3H,MAAO,CAAEgL,cAAe,eAEL/D,IAAlBQ,EAAQtI,YAAuC8H,IAAhB0D,EAA4BA,EAActI,E,IAyC5E4I,GAA6C,SAAA9M,GACjD,OAAO0H,EAAAA,EAAAA,eAACqF,EAAAA,GAARpC,EAAAA,EAAAA,GAAA,CAAwBC,SAAA,GAAY5K,G,EAShCgN,GAAe,gBAKfC,IAAgBhE,EAAAA,EAAAA,aACpB,SAACjJ,EAAwCC,GACvC,IAAMqJ,EAAU3F,GAAiBqJ,GAAchN,EAAMiE,eACrDiJ,GAAgCjI,EAAAA,EAAAA,YAAhCkI,GAAAhM,EAAAA,EAAAA,GAAA+L,EAAA,GAAOE,EAADD,EAAC,GAAUE,EAAXF,EAAC,GAOP,IAJAP,EAAAA,EAAAA,IAAgB,WACdS,EAAY,IAAIC,iB,GACf,KAEEhE,EAAQlF,KAAM,CACjB,IAAMmJ,EAAOH,EACb,OAAOG,GACHC,EAAAA,EAAAA,eACE9F,EAAAA,EAAAA,eAAC+F,GAFP,CAE6B7F,MAAO5H,EAAMiE,gBAClCyD,EAAAA,EAAAA,eAAC3E,EAAW2K,KADd,CACmB9F,MAAO5H,EAAMiE,gBAC5ByD,EAAAA,EAAAA,eAAA,WAAM1H,EAAMkE,YAGhBqJ,GAEF,I,CAGN,OAAO7F,EAAAA,EAAAA,eAACiG,IAADhD,EAAAA,EAAAA,GAAA,GAAuB3K,EAA9B,CAAqCM,IAAKL,I,IAUxC2N,GAAiB,GAqBvBC,GACEvK,EAA+C0J,IADjDc,IAAA3M,EAAAA,EAAAA,GAAA0M,GAAA,GAAOJ,GAADK,GAAC,GAAuBC,GAAxBD,GAAC,GAiCDH,IAAoB1E,EAAAA,EAAAA,aACxB,SAACjJ,EAA4CC,GAC3C,IACEgE,EAmBEjE,EApBJ,c,EAoBIA,EApBE+B,SAEJA,OAAQ,IAAAiM,EAAG,eAFPA,EAGJC,EAiBEjO,EApBJ,iBAIEkO,EAgBElO,EApBJ,gBAKEmO,EAeEnO,EApBJ,qBAQEoO,EAYEpO,EApBJ,KASEqO,EAWErO,EApBJ,WAUEsO,EAUEtO,EApBJ,MAWEuO,EASEvO,EApBJ,YAYEwO,EAQExO,EApBJ,aAaEyO,EAOEzO,EApBJ,kBAcE0O,EAME1O,EApBJ,iBAeE2O,EAKE3O,EApBJ,OAgBE4O,EAIE5O,EApBJ,iBAiBE6O,EAGE7O,EApBJ,gBAmBK8O,GAAH1F,EAAAA,EAAAA,GACEpJ,EApBJ+O,GAqBMzF,EAAU3F,GAAiBqJ,GAAc/I,GAC/C+K,GAA8B/J,EAAAA,EAAAA,UAAgD,MAA9EgK,GAAA9N,EAAAA,EAAAA,GAAA6N,EAAA,GAAOE,EAADD,EAAC,GAASE,EAAVF,EAAC,GACPG,GAAgCnK,EAAAA,EAAAA,UAA6C,MAA7EoK,GAAAlO,EAAAA,EAAAA,GAAAiO,EAAA,GAAOE,EAADD,EAAC,GAAUE,EAAXF,EAAC,GACD7F,GAAeC,EAAAA,EAAAA,GAAgBxJ,GAAe,SAAAuP,GAAD,OAAUL,EAAWK,EAApC,IACpCC,GAAwCxK,EAAAA,EAAAA,UAAyC,MAAjFyK,GAAAvO,EAAAA,EAAAA,GAAAsO,EAAA,GAAOE,EAADD,EAAC,GAAcE,EAAfF,EAAC,GACPG,GAAgD5K,EAAAA,EAAAA,UAC9C,MADF6K,IAAA3O,EAAAA,EAAAA,GAAA0O,EAAA,GAAOE,GAADD,GAAC,GAAkBE,GAAnBF,GAAC,GAGDpG,GAAW1G,EAAciB,GAC/BgM,IAAwChL,EAAAA,EAAAA,WAAe,GAAvDiL,IAAA/O,EAAAA,EAAAA,GAAA8O,GAAA,GAAOE,GAADD,GAAC,GAAcE,GAAfF,GAAC,GACDG,IAAyB1J,EAAAA,EAAAA,SAAa,IAG5C2J,EAAAA,EAAAA,YAAgB,WACd,GAAIpB,EAAS,OAAOqB,EAAAA,EAAAA,IAAWrB,E,GAC9B,CAACA,KAIJsB,EAAAA,EAAAA,MAEA,IAAMC,IAAarI,EAAAA,EAAAA,cAChB,SAAAsI,GACC,IC1gByBC,ED8gBzBC,EAJAC,EAAkCnH,KAAWnC,KAAK,SAAAyC,GAAD,OAAUA,EAAK1J,IAAIoL,OAAlC,IAAlCoF,GC1gByBH,ED0gBzBE,GCzgBC,EAAAE,EAAA,GAAeJ,KAAQ,EAAAK,EAAA,GAAgBL,KAAQ,EAAAM,EAAA,GAA2BN,KAAQ,EAAAO,EAAA,MDygB5EC,EAADL,EAAC,GACPM,EADMN,EAAAO,MAAA,GACuBA,OAAO,GAA7BC,GAAPnQ,EAAAA,EAAAA,GAAAiQ,EAAA,GAAO,GAEDG,EAA6BC,SAASC,cAA5CC,GAAAC,EAAAA,EAAAA,GACwBjB,GAAxB,QAAAgB,EAAAE,MAAAhB,EAAAc,EAAAG,KAAAC,MAAoC,KAAzBC,EAAXnB,EAAA5P,MAEE,GAAI+Q,IAAcR,EAA4B,OAM9C,GALS,OAATQ,QAAS,IAATA,GAAAA,EAAWC,eAAe,CAAEC,MAAO,YAE/BF,IAAcZ,GAAa7B,IAAUA,EAAS4C,UAAY,GAC1DH,IAAcT,GAAYhC,IAAUA,EAAS4C,UAAY5C,EAAS6C,cAC7D,OAATJ,QAAS,IAATA,GAAAA,EAAW3G,QACPoG,SAASC,gBAAkBF,EAA4B,M,CAC5D,OAAAa,GAAAV,EAAAW,EAAAD,EAAA,SAAAV,EAAAY,GAAA,C,GAEH,CAAC5I,GAAU4F,IAGPiD,IAAoBnK,EAAAA,EAAAA,cACxB,kBAAMqI,GAAW,CAACd,EAAcT,GADR,GAExB,CAACuB,GAAYd,EAAcT,KAK7BoB,EAAAA,EAAAA,YAAgB,WACVH,IACFoC,I,GAED,CAACpC,GAAcoC,KAIlB,IAAQjO,GAA2CgF,EAAnD,aAAsB5C,GAA6B4C,EAAnD,0BACAgH,EAAAA,EAAAA,YAAgB,WACd,GAAIpB,EAAS,CACX,IAAIsD,EAAmB,CAAE7G,EAAG,EAAGG,EAAG,GAE5B2G,EAAqB,SAAAjS,GAAwB,IAAAkS,EAAAC,EAAAC,EAAAC,EACjDL,EAAmB,CACjB7G,EAAGrK,KAAKwR,IAAIxR,KAAKsK,MAAMpL,EAAMqL,QAAjB,QAAA6G,EAAA,QAAAC,EAA2BjM,GAAyBgF,eAApD,IAAAiH,OAAA,EAA2BA,EAAkChH,SAA7D,IAAA+G,EAAAA,EAAkE,IAC9E5G,EAAGxK,KAAKwR,IAAIxR,KAAKsK,MAAMpL,EAAMuL,QAAjB,QAAA6G,EAAA,QAAAC,EAA2BnM,GAAyBgF,eAApD,IAAAmH,OAAA,EAA2BA,EAAkC/G,SAA7D,IAAA8G,EAAAA,EAAkE,I,EAG5EG,EAAmB,SAAAvS,GAEnBgS,EAAiB7G,GAAK,IAAM6G,EAAiB1G,GAAK,GACpDtL,EAAMK,iBAGDqO,EAAQ8D,SAASxS,EAAMqI,SAC1BvE,IAAa,GAGjBkN,SAASyB,oBAAoB,cAAeR,GAC5C/L,GAAyBgF,QAAU,I,EAQrC,OALyC,OAArChF,GAAyBgF,UAC3B8F,SAAS0B,iBAAiB,cAAeT,GACzCjB,SAAS0B,iBAAiB,YAAaH,EAAiB,CAAEI,SAAS,EAAMC,MAAM,KAG1E,WACL5B,SAASyB,oBAAoB,cAAeR,GAC5CjB,SAASyB,oBAAoB,YAAaF,EAAiB,CAAEI,SAAS,G,KAGzE,CAACjE,EAAS5K,GAAcoC,MAE3B4J,EAAAA,EAAAA,YAAgB,WACd,IAAM+C,EAAQ,WAAH,OAAS/O,IAAa,EAAjC,EAGA,OAFAgP,OAAOJ,iBAAiB,OAAQG,GAChCC,OAAOJ,iBAAiB,SAAUG,GAC3B,WACLC,OAAOL,oBAAoB,OAAQI,GACnCC,OAAOL,oBAAoB,SAAUI,E,IAEtC,CAAC/O,KAEJ,IAAAiP,GAA2C3J,IAAoB,SAAAC,GAC7D,IAAMC,EAAeJ,KAAWK,QAAQ,SAAAC,GAAD,OAAWA,EAAKnF,QAAlC,IACfoF,EAAcH,EAAaI,MAAM,SAAAF,GAAD,OAAUA,EAAK1J,IAAIoL,UAAY8F,SAASC,aAA1D,IACdtH,EAAWC,GAAaN,EAAcD,EAAQI,GAChDE,GAKFqJ,YAAW,kBAAOrJ,EAAS7J,IAAIoL,QAAwBN,OAA7C,G,IATdqI,IAAAtS,EAAAA,EAAAA,GAAAoS,GAAA,GAAOjJ,GAADmJ,GAAC,GAAWlJ,GAAZkJ,GAAC,GAaDC,IAAkBtL,EAAAA,EAAAA,cACtB,SAACoH,EAAgCxO,EAAe6D,GAC9C,IAAM8O,GAAoBtD,GAAuB3E,UAAY7G,QACpBiE,IAAlBQ,EAAQtI,OAAuBsI,EAAQtI,QAAUA,GAClD2S,KACpB/D,EAAgBJ,GACZmE,IAAkBtD,GAAuB3E,SAAU,G,GAG3D,CAACpC,EAAQtI,QAEL4S,IAAkBxL,EAAAA,EAAAA,cAAkB,yBAAM8G,QAAN,IAAMA,OAAN,EAAMA,EAAS9D,OAAjC,GAA0C,CAAC8D,IAC7D2E,IAAsBzL,EAAAA,EAAAA,cAC1B,SAACoH,EAAoCxO,EAAe6D,GAClD,IAAM8O,GAAoBtD,GAAuB3E,UAAY7G,QACpBiE,IAAlBQ,EAAQtI,OAAuBsI,EAAQtI,QAAUA,GAClD2S,IACpB3D,GAAoBR,E,GAGxB,CAAClG,EAAQtI,QAGL8S,GAA8B,WAAb/R,EAAwBgS,GAAuBC,GAGhEC,GACJH,KAAmBC,GACf,C,KACE3F,E,WACAC,E,MACAC,E,YACAC,E,aACAC,E,kBACAC,E,iBACAC,E,OACAC,E,iBACAC,E,gBACAC,GAEF,CAAC,EAEP,OACEnH,EAAAA,EAAAA,eAAC+F,GADH,CAEI7F,MAAO3D,EACPiL,QAASA,EACTI,SAAUA,EACV4E,iBAAkB3E,EAClBmE,gBAAiBA,GACjB/D,aAAcA,EACdwE,YAAaP,GACbC,oBAAqBA,GACrBtB,kBAAmBA,GACnBxC,iBAAkBA,GAClBhO,SAAUA,EACVoO,aAAcA,GACd7F,UAAWA,KAEX5C,EAAAA,EAAAA,eAAC0M,EAAAA,EAfH,CAegBC,GAAIC,EAAAA,GAAMC,gBAAA,IACtB7M,EAAAA,EAAAA,eAAC8M,EAAAA,EADH,CAEI5J,SAAO,EAGP6J,QAASnL,EAAQlF,KACjBsQ,iBAAmB,SAAAlU,GAEjBA,EAAMK,gB,EAER8T,oBAAoBzJ,EAAAA,EAAAA,GAAqB+C,GAAmB,SAAAzN,GAAU,IAAAoU,EACpE,QAAAA,EAAAtL,EAAQnE,eAAR,IAAAyP,GAAAA,EAAiBxJ,MAAM,CAAEyJ,eAAe,IACxCrU,EAAMK,gB,MAGR6G,EAAAA,EAAAA,eAACoN,EAAAA,GAdH,CAeIlK,SAAO,EACPmK,6BAA2B,EAC3B7G,gBAAiBA,EACjBC,qBAAsBA,EAGtB6G,eAAiB,SAAAxU,GAAD,OAAWA,EAAMK,gBAPnC,EAQEoU,UAAW,kBAAM3L,EAAQhF,cAAa,EAAtC,IAEAoD,EAAAA,EAAAA,eAACoM,IAVHnJ,EAAAA,EAAAA,GAAA,CAWIK,KAAK,UACLkK,GAAI5L,EAAQtB,UACZ,aAAYsB,EAAQlF,KAAO,OAAS,SACpCM,IAAK4E,EAAQ5E,IACbyQ,cAAgB,SAAA3U,GAAD,OAAWA,EAAMK,gBAAhC,GACIiO,EACAmF,GAPN,CAQEmB,SAAU,kBAAMhF,IAAgB,EARlC,EASE9P,IAAKkJ,EACL3H,OAAKC,EAAAA,EAAAA,GAAA,CAEHuT,QAAS,OACTC,cAAe,SAEfC,QAAS,QACNzG,EAAajN,OAElBmK,WAAWd,EAAAA,EAAAA,GAAqB4D,EAAa9C,WAAY,SAAAxL,GACvD,IAAMgV,EAAgBhV,EAAMiL,SAAWjL,EAAM0L,QAAU1L,EAAM2L,QAO7D,GAJkB,QAAd3L,EAAMmI,KAAenI,EAAMK,iBAE1B2U,GAAsC,IAArBhV,EAAMmI,IAAIyD,QAAc7B,GAAsB/J,EAAMmI,KAEtE,CAAC,UAAW,YAAa,OAAQ,OAAO0D,SAAS7L,EAAMmI,KAAM,CAC/D,IACI8M,EADU/L,KAAWK,QAAQ,SAAAC,GAAD,OAAWA,EAAKnF,QAAlC,IACa0C,KAAK,SAAAyC,GAAD,OAAUA,EAAK1J,IAAIoL,OAA7B,IAKrB,GAHI,CAAC,UAAW,OAAOW,SAAS7L,EAAMmI,OACpC8M,EAAiBA,EAAepE,QAAQqE,WAEtC,CAAC,UAAW,aAAarJ,SAAS7L,EAAMmI,KAAM,CAChD,IAAMgN,EAAiBnV,EAAMqI,OACvB+M,EAAeH,EAAeI,QAAQF,GAC5CF,EAAiBA,EAAepE,MAAMuE,EAAe,E,CAOvDpC,YAAW,kBAAM/C,GAAWgF,EAAlB,IAEVjV,EAAMK,gB,eAuBpBmT,IAA4B/K,EAAAA,EAAAA,aAGhC,SAACjJ,EAAoDC,GACrD,IAAQgE,EAA4CjE,EAApD,cAAuBoV,EAA6BpV,EAApD,SAAoC8V,GAAH1M,EAAAA,EAAAA,GAAmBpJ,EAApD+V,GACMzM,EAAU3F,GAAiBqJ,GAAc/I,GACzC+R,EAAiBjI,GAAwBf,GAAc/I,GAC7DgS,GAA4ChR,EAAAA,EAAAA,UAAsC,MAAlFiR,GAAA/U,EAAAA,EAAAA,GAAA8U,EAAA,GAAOE,EAADD,EAAC,GAAgBE,EAAjBF,EAAC,GACPG,GAA8BpR,EAAAA,EAAAA,UAAwD,MAAtFqR,GAAAnV,EAAAA,EAAAA,GAAAkV,EAAA,GAAOnH,EAADoH,EAAC,GAASnH,EAAVmH,EAAC,GACD9M,GAAeC,EAAAA,EAAAA,GAAgBxJ,GAAe,SAAAuP,GAAD,OAAUL,EAAWK,EAApC,IAC9B9F,EAAW1G,EAAciB,GACzBsS,GAA0B5P,EAAAA,EAAAA,SAAa,GACvC6P,GAAsB7P,EAAAA,EAAAA,SAAa,GAEjC2I,EAAgE0G,EAAxE,SAAkBrG,EAAsDqG,EAAxE,aAAgCjG,EAAwCiG,EAAxE,iBAAkDzD,EAAsByD,EAAxE,kBACMjU,GAAWqG,EAAAA,EAAAA,cAAkB,WACjC,GACEkB,EAAQnE,SACRmE,EAAQ/D,WACR4Q,GACAjH,GACAI,GACAK,GACAI,EACA,CACA,IAAM0G,EAAcnN,EAAQnE,QAAQuR,wBAK9BC,EAAczH,EAAQwH,wBACtBE,EAAgBtN,EAAQ/D,UAAUmR,wBAClCG,EAAe9G,EAAiB2G,wBAEtC,GAAoB,QAAhBpN,EAAQ5E,IAAe,CACzB,IAAMoS,EAAiBD,EAAaE,KAAOJ,EAAYI,KACjDA,EAAOH,EAAcG,KAAOD,EAC5BE,EAAYP,EAAYM,KAAOA,EAC/BE,EAAkBR,EAAYxU,MAAQ+U,EACtCE,EAAe5V,KAAKD,IAAI4V,EAAiBN,EAAY1U,OACrDkV,EAAY7D,OAAO8D,WAAaxJ,GAChCyJ,EAAcC,EAAMP,EAAM,CAACnJ,GAAgBuJ,EAAYD,IAE7Df,EAAetU,MAAM0V,SAAWN,EAAkB,KAClDd,EAAetU,MAAMkV,KAAOM,EAAc,I,KACrC,CACL,IAAMP,EAAiBH,EAAYa,MAAQX,EAAaW,MAClDA,EAAQlE,OAAO8D,WAAaR,EAAcY,MAAQV,EAClDW,EAAanE,OAAO8D,WAAaX,EAAYe,MAAQA,EACrDP,EAAkBR,EAAYxU,MAAQwV,EACtCP,EAAe5V,KAAKD,IAAI4V,EAAiBN,EAAY1U,OACrDyV,EAAWpE,OAAO8D,WAAaxJ,GAC/B+J,EAAeL,EAAME,EAAO,CAAC5J,GAAgB8J,EAAWR,IAE9Df,EAAetU,MAAM0V,SAAWN,EAAkB,KAClDd,EAAetU,MAAM2V,MAAQG,EAAe,I,CAM9C,IAAMC,EAAQlO,IACRmO,EAAkBvE,OAAOwE,YAAclK,GACvCmK,EAAczI,EAAS6C,aAEvB6F,EAAgB1E,OAAO2E,iBAAiB/I,GACxCgJ,EAAwBC,SAASH,EAAcI,eAAgB,IAC/DC,EAAoBF,SAASH,EAAcM,WAAY,IACvDC,EAA2BJ,SAASH,EAAcQ,kBAAmB,IAErEC,EAAoBP,EAAwBG,EAAoBN,EADzCI,SAASH,EAAcU,cAAe,IACwCH,EACrGI,EAAmBrX,KAAKF,IAAgC,EAA5BuO,EAAaiJ,aAAkBH,GAE3DI,EAAiBvF,OAAO2E,iBAAiB3I,GACzCwJ,EAAqBX,SAASU,EAAeP,WAAY,IACzDS,EAAwBZ,SAASU,EAAeH,cAAe,IAE/DM,EAAyBvC,EAAYwC,IAAMxC,EAAYvU,OAAS,EAAI0L,GACpEsL,EAA4BrB,EAAkBmB,EAE9CG,EAAyBxJ,EAAaiJ,aAAe,EAErDQ,EAAyBlB,EAAwBG,GAD9B1I,EAAa0J,UAAYF,GAE5CG,EAA4Bb,EAAoBW,EAItD,GAFoCA,GAA0BJ,EAE7B,CAC/B,IAAMO,EAAa5J,IAAiBiI,EAAMA,EAAMxL,OAAS,GAAG9L,IAAIoL,QAChEyK,EAAetU,MAAM2X,OAAS,MAC9B,IAAMC,EACJvK,EAAQwK,aAAepK,EAAS+J,UAAY/J,EAASsJ,aASjD1W,EAASkX,EAR0B9X,KAAKD,IAC5C6X,EACAC,GAEGI,EAAaR,EAAwB,GACtCU,EACAlB,GAGJpC,EAAetU,MAAMK,OAASA,EAAS,I,KAClC,CACL,IAAMyX,EAAchK,IAAiBiI,EAAM,GAAGtX,IAAIoL,QAClDyK,EAAetU,MAAMoX,IAAM,MAC3B,IAQM/W,EARgCZ,KAAKD,IACzC2X,EACAd,EACE5I,EAAS+J,WAERM,EAAcb,EAAqB,GACpCK,GAE2CG,EAC/CnD,EAAetU,MAAMK,OAASA,EAAS,KACvCoN,EAAS4C,UAAYkH,EAAyBJ,EAAyB1J,EAAS+J,S,CAGlFlD,EAAetU,MAAMO,OAArB,GAAAwX,OAAiChM,GAAe,QAChDuI,EAAetU,MAAMgY,UAAYlB,EAAmB,KACpDxC,EAAetU,MAAMiY,UAAYjC,EAAkB,KAG3C,OAARzC,QAAQ,IAARA,GAAAA,IAIA2E,uBAAsB,kBAAOxD,EAAwB7K,SAAU,CAA1C,G,IAEtB,CACDhC,EACAJ,EAAQnE,QACRmE,EAAQ/D,UACR4Q,EACAjH,EACAI,EACAK,EACAI,EACAzG,EAAQ5E,IACR0Q,KAGFxI,EAAAA,EAAAA,IAAgB,kBAAM7K,GAAP,GAAmB,CAACA,IAGnC,IAAAiY,GAA0C/U,EAAAA,EAAAA,YAA1CgV,GAAA9Y,EAAAA,EAAAA,GAAA6Y,EAAA,GAAOE,EAADD,EAAC,GAAeE,EAAhBF,EAAC,IACPrN,EAAAA,EAAAA,IAAgB,WACVsC,GAASiL,EAAiB7G,OAAO2E,iBAAiB/I,GAASkL,O,GAC9D,CAAClL,IAMJ,IAAMmL,GAA2BjS,EAAAA,EAAAA,cAC9B,SAAAoH,GACKA,IAAwC,IAAhCgH,EAAoB9K,UAC9B3J,IACiB,OAAjBwQ,QAAiB,IAAjBA,GAAAA,IACAiE,EAAoB9K,SAAU,E,GAGlC,CAAC3J,EAAUwQ,IAGb,OACE7K,EAAAA,EAAAA,eAAC4S,GADH,CAEI1S,MAAO3D,EACPkS,eAAgBA,EAChBI,wBAAyBA,EACzBgE,qBAAsBF,IAEtB3S,EAAAA,EAAAA,eANF,OAOIpH,IAAK8V,EACLvU,MAAO,CACLwT,QAAS,OACTC,cAAe,SACfvT,SAAU,QACVqY,OAAQF,KAGVxS,EAAAA,EAAAA,eAACmD,EAAAA,GAAU2P,KAAX7P,EAAAA,EAAAA,GAAA,GACMmL,EAVR,CAWIxV,IAAKkJ,EACL3H,OAAKC,EAAAA,EAAAA,GAAA,CAGH2Y,UAAW,aAEXX,UAAW,QACRhE,EAAYjU,W,IAoBrBkS,IAAuB9K,EAAAA,EAAAA,aAG3B,SAACjJ,EAA+CC,GAChD,IACEgE,EAIEjE,EALJ,c,EAKIA,EALEsO,MAEJA,OAAK,IAAAoM,EAAG,QAFJA,EAAAC,EAKF3a,EALE0O,iBAGJA,OAAgB,IAAAiM,EAAG/M,GAHf+M,EAID7E,GAAH1M,EAAAA,EAAAA,GACEpJ,EALJ4a,GAMM7V,EAAcxB,GAAeU,GAEnC,OACEyD,EAAAA,EAAAA,eAACmT,EAAAA,IAADlQ,EAAAA,EAAAA,GAAA,GACM5F,EACA+Q,EAHR,CAIIxV,IAAKL,EACLqO,MAAOA,EACPI,iBAAkBA,EAClB7M,OAAKC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAEH2Y,UAAW,cACR3E,EAAYjU,OAHV,IAMH,0CAA2C,uCAC3C,yCAA0C,sCAC1C,0CAA2C,uCAC3C,+BAAgC,mCAChC,gCAAiC,wC,IAmB3CiZ,GACExX,EAAgD0J,GAAc,CAAC,GADjE+N,IAAA5Z,EAAAA,EAAAA,GAAA2Z,GAAA,GAAOR,GAADS,GAAC,GAAwBC,GAAzBD,GAAC,GAGDE,GAAgB,iBAMhBC,IAAiBjS,EAAAA,EAAAA,aACrB,SAACjJ,EAAyCC,GACxC,IAAQgE,EAAoCjE,EAA5C,cAA0Bmb,GAAH/R,EAAAA,EAAAA,GAAqBpJ,EAA5Cob,GACMpF,EAAiBjI,GAAwBkN,GAAehX,GACxDoX,EAAkBL,GAAyBC,GAAehX,GAC1DuF,GAAeC,EAAAA,EAAAA,GAAgBxJ,EAAc+V,EAAe9B,kBAC5DoH,GAAmB3U,EAAAA,EAAAA,QAAa,GACtC,OACEe,EAAAA,EAAAA,eAAA6T,EAAAA,SAAA,MAEE7T,EAAAA,EAAAA,eAHJ,SAIM8T,wBAAyB,CACvBC,OAAQ,gLAGZ/T,EAAAA,EAAAA,eAAC3E,EAAW2K,KALZ,CAKiB9F,MAAO3D,IACtByD,EAAAA,EAAAA,eAACmD,EAAAA,GAAU2P,KADb7P,EAAAA,EAAAA,GAAA,CAEI,6BAA2B,GAC3BK,KAAK,gBACDmQ,EAHN,CAIE7a,IAAKkJ,EACL3H,OAAKC,EAAAA,EAAAA,GAAA,CAIHC,SAAU,WACV2Z,KAAM,EACNrZ,SAAU,QACP8Y,EAActZ,OAEnB8Z,UAAUzQ,EAAAA,EAAAA,GAAqBiQ,EAAcQ,UAAW,SAAAnb,GACtD,IAAM8O,EAAW9O,EAAM2K,cACfgL,EAA4CkF,EAApD,eAAwB9E,EAA4B8E,EAApD,wBACA,GAA2B,OAAvB9E,QAAuB,IAAvBA,GAAAA,EAAyB7K,SAAWyK,EAAgB,CACtD,IAAMyF,EAAata,KAAKwR,IAAIwI,EAAiB5P,QAAU4D,EAAS4C,WAChE,GAAI0J,EAAa,EAAG,CAClB,IAAM/D,EAAkBvE,OAAOwE,YAAclK,GACvCiO,EAAeC,WAAW3F,EAAetU,MAAMgY,WAC/CkC,EAAYD,WAAW3F,EAAetU,MAAMK,QAC5C8Z,EAAa1a,KAAKD,IAAIwa,EAAcE,GAE1C,GAAIC,EAAanE,EAAiB,CAChC,IAAMoE,EAAaD,EAAaJ,EAC1BM,EAAoB5a,KAAKF,IAAIyW,EAAiBoE,GAC9CE,EAAaF,EAAaC,EAEhC/F,EAAetU,MAAMK,OAASga,EAAoB,KACd,QAAhC/F,EAAetU,MAAM2X,SACvBlK,EAAS4C,UAAYiK,EAAa,EAAIA,EAAa,EAEnDhG,EAAetU,MAAMua,eAAiB,W,GAK9Cd,EAAiB5P,QAAU4D,EAAS4C,S,YAe5CmK,GAAa,cAInBC,GACEhZ,EAA6C+Y,IAD/CE,IAAApb,EAAAA,EAAAA,GAAAmb,GAAA,GA2CME,IA3CAD,GAAC,GAADA,GAAC,GA2CW,cAUlBE,GACEnZ,EAA4CkZ,IAD9CE,IAAAvb,EAAAA,EAAAA,GAAAsb,GAAA,GAAOE,GAADD,GAAC,GAA2BE,GAA5BF,GAAC,GAUDG,IAAa5T,EAAAA,EAAAA,aACjB,SAACjJ,EAAqCC,GACpC,IACEgE,EAKEjE,EANJ,cAEEgB,EAIEhB,EANJ,M,EAMIA,EANE6E,SAGJA,OAAQ,IAAAiY,GAHJA,EAIOC,EAET/c,EAFFgd,UACGC,GAAH7T,EAAAA,EAAAA,GACEpJ,EANJkd,GAOM5T,EAAU3F,GAAiB6Y,GAAWvY,GACtC+R,EAAiBjI,GAAwByO,GAAWvY,GACpDkZ,EAAa7T,EAAQtI,QAAUA,EACrCoc,GAAkCnY,EAAAA,EAAAA,UAAA,OAAe8X,QAAf,IAAeA,EAAAA,EAAiB,IAAlEM,GAAAlc,EAAAA,EAAAA,GAAAic,EAAA,GAAOJ,EAADK,EAAC,GAAWC,EAAZD,EAAC,GACPE,GAAkCtY,EAAAA,EAAAA,WAAe,GAAjDuY,GAAArc,EAAAA,EAAAA,GAAAoc,EAAA,GAAOE,EAADD,EAAC,GAAWE,EAAZF,EAAC,GACDhU,GAAeC,EAAAA,EAAAA,GAAgBxJ,GAAe,SAAAuP,GAAD,IAAAmO,EAAA,eAAAA,EACjD3H,EAAetC,uBADkC,IAAAiK,OAAA,EACjDA,EAAAjd,KAAAsV,EAAiCxG,EAAMxO,EAAO6D,E,IAE1C+Y,GAAS3V,EAAAA,EAAAA,KAET4V,EAAe,WACdhZ,IACHyE,EAAQ7E,cAAczD,GACtBsI,EAAQhF,cAAa,G,EAIzB,OACEoD,EAAAA,EAAAA,eAACiV,GADH,CAEI/U,MAAO3D,EACPjD,MAAOA,EACP6D,SAAUA,EACV+Y,OAAQA,EACRT,WAAYA,EACZW,kBAAkB1V,EAAAA,EAAAA,cAAmB,SAAAoH,GACnC8N,GAAc,SAAAS,GAAD,IAAAC,EAAA,OAAmBD,IAAiB,QAAAC,EAAA,OAACxO,QAAD,IAACA,OAAD,EAACA,EAAMyO,mBAAP,IAAAD,EAAAA,EAAsB,IAAIE,M,MAC1E,MAEHxW,EAAAA,EAAAA,eAAC3E,EAAWob,SAVd,CAWIvW,MAAO3D,EACPjD,MAAOA,EACP6D,SAAUA,EACVmY,UAAWA,IAEXtV,EAAAA,EAAAA,eAACmD,EAAAA,GAAU2P,KANb7P,EAAAA,EAAAA,GAAA,CAOIK,KAAK,SACL,kBAAiB4S,EACjB,mBAAkBH,EAAY,QAAK3U,EAEnC,gBAAeqU,GAAcM,EAC7B,aAAYN,EAAa,UAAY,YACrC,gBAAetY,QAAYiE,EAC3B,gBAAejE,EAAW,QAAKiE,EAC/BF,SAAU/D,OAAWiE,GAAa,GAC9BmU,EAVN,CAWE3c,IAAKkJ,EACL4U,SAASlT,EAAAA,EAAAA,GAAqB+R,EAAUmB,SAAS,kBAAMV,GAAa,EAAvC,IAC7BW,QAAQnT,EAAAA,EAAAA,GAAqB+R,EAAUoB,QAAQ,kBAAMX,GAAa,EAAtC,IAC5BY,aAAapT,EAAAA,EAAAA,GAAqB+R,EAAUqB,YAAaT,GACzDU,eAAerT,EAAAA,EAAAA,GAAqB+R,EAAUsB,eAAgB,SAAA/d,GAC9C,IAAAge,EAAV3Z,EACF,QAAA2Z,EAAAxI,EAAe7B,mBAAf,IAAAqK,GAAAA,EAAA9d,KAAAsV,GAIAxV,EAAM2K,cAAcC,MAAM,CAAEyJ,eAAe,G,IAG/C4J,gBAAgBvT,EAAAA,EAAAA,GAAqB+R,EAAUwB,gBAAiB,SAAAje,GACV,IAAAke,EAAhDle,EAAM2K,gBAAkBqG,SAASC,gBACnC,QAAAiN,EAAA1I,EAAe7B,mBAAf,IAAAuK,GAAAA,EAAAhe,KAAAsV,G,IAGJhK,WAAWd,EAAAA,EAAAA,GAAqB+R,EAAUjR,WAAY,SAAAxL,GAAU,IAAAme,EACF,MAAtC,QAAAA,EAAA3I,EAAe1L,iBAAf,IAAAqU,OAAA,EAAAA,EAA0BjT,UACb,MAAdlL,EAAMmI,MACvBjG,EAAe2J,SAAS7L,EAAMmI,MAAMkV,IAEtB,MAAdrd,EAAMmI,KAAanI,EAAMK,iB,YAerC+d,GAAiB,iBAKjBC,IAAiB5V,EAAAA,EAAAA,aACrB,SAACjJ,EAAyCC,GAExC,IAAQgE,EAAsDjE,EAA9D,cAA4C8e,GAAkB9e,EAA9D,UAA8DA,EAA9D,OAAyCoJ,EAAAA,EAAAA,GAAqBpJ,EAA9D+e,IACMzV,EAAU3F,GAAiBib,GAAgB3a,GAC3C+R,EAAiBjI,GAAwB6Q,GAAgB3a,GACzD+a,EAAcpC,GAAqBgC,GAAgB3a,GACnDgb,EAAuBlb,GAA8B6a,GAAgB3a,GAC3Eib,GAAwCja,EAAAA,EAAAA,UAA6C,MAArFka,GAAAhe,EAAAA,EAAAA,GAAA+d,EAAA,GAAOE,EAADD,EAAC,GAAcE,EAAfF,EAAC,GACD3V,GAAeC,EAAAA,EAAAA,GACnBxJ,GACC,SAAAuP,GAAD,OAAU6P,EAAgB7P,EAFQ,GAGlCwP,EAAYlB,kBACX,SAAAtO,GAAD,IAAA8P,EAAA,eAAAA,EAAUtJ,EAAenC,2BAAzB,IAAAyL,OAAA,EAAUA,EAAA5e,KAAAsV,EAAqCxG,EAAMwP,EAAYhe,MAAOge,EAAYna,S,IAGhFoZ,EAAW,OAAGmB,QAAH,IAAGA,OAAH,EAAGA,EAAcnB,YAC5BsB,GAAeC,EAAAA,EAAAA,UACnB,kBACE9X,EAAAA,EAAAA,eAFJ,UAEYiB,IAAKqW,EAAYhe,MAAOA,MAAOge,EAAYhe,MAAO6D,SAAUma,EAAYna,UAC7EoZ,EAHc,GAMnB,CAACe,EAAYna,SAAUma,EAAYhe,MAAOid,IAGpC9V,EAA4C8W,EAApD,kBAA2B1W,EAAyB0W,EAApD,qBAMA,OALArS,EAAAA,EAAAA,IAAgB,WAEd,OADAzE,EAAkBoX,GACX,kBAAMhX,EAAqBgX,EAAlC,C,GACC,CAACpX,EAAmBI,EAAsBgX,KAG3C7X,EAAAA,EAAAA,eAAA6T,EAAAA,SAAA,MACE7T,EAAAA,EAAAA,eAACmD,EAAAA,GAAUlJ,MAFfgJ,EAAAA,EAAAA,GAAA,CAEoBuK,GAAI8J,EAAYpB,QAAYkB,EAA5C,CAA2Dxe,IAAKkJ,KAG/DwV,EAAY7B,YAAc7T,EAAQ/D,YAAc+D,EAAQ3D,sBACrD6H,EAAAA,EAAAA,cAAsBsR,EAAc5a,SAAUoF,EAAQ/D,WACtD,K,IAoONmD,IAAeO,EAAAA,EAAAA,aACnB,SAACjJ,EAAOC,GACN,IAAQe,EAA0BhB,EAAlC,MAAkByf,GAAHrW,EAAAA,EAAAA,GAAmBpJ,EAAlC0f,GACMpf,GAAMqG,EAAAA,EAAAA,QAAgC,MACtC6C,GAAeC,EAAAA,EAAAA,GAAgBxJ,EAAcK,GAC7Cqf,EErgDV,SAAwB3e,GACtB,IAAMV,GAAMsf,EAAAA,EAAAA,QAAa,CAH3B5e,MAG6BA,EAAO6e,SAAU7e,IAK5C,OAAO8e,EAAAA,EAAAA,UAAc,WAKnB,OAJIxf,EAAIoL,QAAQ1K,QAAUA,IACxBV,EAAIoL,QAAQmU,SAAWvf,EAAIoL,QAAQ1K,MACnCV,EAAIoL,QAAQ1K,MAAQA,GAEfV,EAAIoL,QAAQmU,Q,GAClB,CAAC7e,G,CFy/CgB+e,CAAY/e,GA8B9B,OA3BAsP,EAAAA,EAAAA,YAAgB,WACd,IAAM0P,EAAS1f,EAAIoL,QACbuU,EAAc3M,OAAO4M,kBAAkBC,UAKvC1Z,EAJa2Z,OAAOC,yBACxBJ,EACA,SAE0BK,IAC5B,GAAIX,IAAc3e,GAASyF,EAAU,CACnC,IAAMjG,EAAQ,IAAI+f,MAAM,SAAU,CAAEC,SAAS,IAC7C/Z,EAAS/F,KAAKsf,EAAQhf,GACtBgf,EAAOS,cAAcjgB,E,IAEtB,CAACmf,EAAW3e,KAeb0G,EAAAA,EAAAA,eAACgZ,EADH,CACkB9V,SAAA,IACdlD,EAAAA,EAAAA,eAAA,UAAAiD,EAAAA,EAAAA,GAAA,GAAY8U,EADd,CAC2Bnf,IAAKkJ,EAAchF,aAAcxD,K,IAQlE,SAAS4I,GAAmB+W,GAC1B,IAAMC,GAAqBC,EAAAA,EAAAA,GAAeF,GACpCrW,GAAY3D,EAAAA,EAAAA,QAAa,IACzBma,GAAWna,EAAAA,EAAAA,QAAa,GAExB4D,GAAwBnC,EAAAA,EAAAA,cAC3B,SAAAO,GACC,IAAMkB,EAASS,EAAUoB,QAAU/C,EACnCiY,EAAmB/W,GAElB,SAASkX,EAAa/f,GACrBsJ,EAAUoB,QAAU1K,EACpBsS,OAAO0N,aAAaF,EAASpV,SAEf,KAAV1K,IAAc8f,EAASpV,QAAU4H,OAAOE,YAAW,kBAAMuN,EAAa,GAArC,GAA0C,KAJjF,CAAC,CAKElX,E,GAEL,CAAC+W,IAGGpW,GAAiBpC,EAAAA,EAAAA,cAAkB,WACvCkC,EAAUoB,QAAU,GACpB4H,OAAO0N,aAAaF,EAASpV,Q,GAC5B,IAMH,OAJA4E,EAAAA,EAAAA,YAAgB,WACd,OAAO,kBAAMgD,OAAO0N,aAAaF,EAASpV,QAA1C,C,GACC,IAEI,CAACpB,EAAWC,EAAuBC,E,CAoB5C,SAASJ,GACPwN,EACA/N,EACAI,GAEA,IAgBoBgX,EAAYC,EAf1BC,EADatX,EAAOuC,OAAS,GAAK/E,MAAMC,KAAKuC,GAAQuX,OAAO,SAAAC,GAAD,OAAUA,IAASxX,EAAO,EAAnD,IACFA,EAAO,GAAKA,EAC5CyX,EAAmBrX,EAAc2N,EAAM/B,QAAQ5L,IAAgB,EACjEsX,GAagBN,EAbSrJ,EAaGsJ,EAbI5f,KAAKD,IAAIigB,EAAkB,GAcxDL,EAAM1Z,KAAI,SAACia,EAAGC,GAAJ,OAAcR,GAAOC,EAAaO,GAASR,EAAM7U,OAA3D,KAbgD,IAA5B+U,EAAiB/U,SACpBmV,EAAeA,EAAaxX,QAAQ,SAAA2X,GAAD,OAAOA,IAAMzX,CAAjC,KACvC,IAAME,EAAWoX,EAAarX,MAAM,SAAAF,GAAD,OACjCA,EAAKgT,UAAU2E,cAAcC,WAAWT,EAAiBQ,cAD1C,IAGjB,OAAOxX,IAAaF,EAAcE,OAAWrB,C,CAjE/CJ,GAAamZ,YAAc,eA4E3B,IAAMC,GAAO9d,GACP+d,GAAU/Y,GACVgZ,GAAQzV,GAER0V,GAASnV,GACToV,GAAUjV,GACVkV,GAAWjH,GAGXkH,GAAOvF,GACPwF,GAAWxD,E,uBGnoDjB,SAASyD,EAAEjQ,GAAG,IAAIkQ,EAAEjQ,EAAET,EAAE,GAAG,GAAG,iBAAiBQ,GAAG,iBAAiBA,EAAER,GAAGQ,OAAO,GAAG,iBAAiBA,EAAE,GAAGhL,MAAMmb,QAAQnQ,GAAG,IAAIkQ,EAAE,EAAEA,EAAElQ,EAAEjG,OAAOmW,IAAIlQ,EAAEkQ,KAAKjQ,EAAEgQ,EAAEjQ,EAAEkQ,OAAO1Q,IAAIA,GAAG,KAAKA,GAAGS,QAAQ,IAAIiQ,KAAKlQ,EAAEA,EAAEkQ,KAAK1Q,IAAIA,GAAG,KAAKA,GAAG0Q,GAAG,OAAO1Q,CAAC,CAAQ,SAAS4Q,IAAO,IAAI,IAAIpQ,EAAEkQ,EAAEjQ,EAAE,EAAET,EAAE,GAAGS,EAAEoQ,UAAUtW,SAASiG,EAAEqQ,UAAUpQ,QAAQiQ,EAAED,EAAEjQ,MAAMR,IAAIA,GAAG,KAAKA,GAAG0Q,GAAG,OAAO1Q,CAAC,C","sources":["../node_modules/.pnpm/@radix-ui+react-label@2.0.2_@types+react-dom@17.0.9_@types+react@17.0.20_react-dom@17.0.2_react@17.0.2/node_modules/@radix-ui/react-label/dist/packages/react/label/src/Label.tsx","../node_modules/.pnpm/@radix-ui+number@1.0.1/node_modules/@radix-ui/number/dist/packages/core/number/src/number.ts","../node_modules/.pnpm/@radix-ui+react-visually-hidden@1.0.3_@types+react-dom@17.0.9_@types+react@17.0.20_react-dom@17.0.2_react@17.0.2/node_modules/@radix-ui/react-visually-hidden/dist/packages/react/visually-hidden/src/VisuallyHidden.tsx","../node_modules/.pnpm/@radix-ui+react-select@1.2.2_@types+react-dom@17.0.9_@types+react@17.0.20_react-dom@17.0.2_react@17.0.2/node_modules/@radix-ui/react-select/dist/packages/react/select/src/Select.tsx","../node_modules/.pnpm/@babel+runtime@7.22.11/node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/.pnpm/@radix-ui+react-use-previous@1.0.1_@types+react@17.0.20_react@17.0.2/node_modules/@radix-ui/react-use-previous/dist/packages/react/use-previous/src/usePrevious.tsx","../node_modules/.pnpm/clsx@2.0.0/node_modules/clsx/dist/clsx.mjs"],"sourcesContent":["import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * Label\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'Label';\n\ntype LabelElement = React.ElementRef<typeof Primitive.label>;\ntype PrimitiveLabelProps = Radix.ComponentPropsWithoutRef<typeof Primitive.label>;\ninterface LabelProps extends PrimitiveLabelProps {}\n\nconst Label = React.forwardRef<LabelElement, LabelProps>((props, forwardedRef) => {\n  return (\n    <Primitive.label\n      {...props}\n      ref={forwardedRef}\n      onMouseDown={(event) => {\n        props.onMouseDown?.(event);\n        // prevent text selection when double clicking label\n        if (!event.defaultPrevented && event.detail > 1) event.preventDefault();\n      }}\n    />\n  );\n});\n\nLabel.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = Label;\n\nexport {\n  Label,\n  //\n  Root,\n};\nexport type { LabelProps };\n","function clamp(value: number, [min, max]: [number, number]): number {\n  return Math.min(max, Math.max(min, value));\n}\n\nexport { clamp };\n","import * as React from 'react';\nimport { Primitive } from '@radix-ui/react-primitive';\n\nimport type * as Radix from '@radix-ui/react-primitive';\n\n/* -------------------------------------------------------------------------------------------------\n * VisuallyHidden\n * -----------------------------------------------------------------------------------------------*/\n\nconst NAME = 'VisuallyHidden';\n\ntype VisuallyHiddenElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface VisuallyHiddenProps extends PrimitiveSpanProps {}\n\nconst VisuallyHidden = React.forwardRef<VisuallyHiddenElement, VisuallyHiddenProps>(\n  (props, forwardedRef) => {\n    return (\n      <Primitive.span\n        {...props}\n        ref={forwardedRef}\n        style={{\n          // See: https://github.com/twbs/bootstrap/blob/master/scss/mixins/_screen-reader.scss\n          position: 'absolute',\n          border: 0,\n          width: 1,\n          height: 1,\n          padding: 0,\n          margin: -1,\n          overflow: 'hidden',\n          clip: 'rect(0, 0, 0, 0)',\n          whiteSpace: 'nowrap',\n          wordWrap: 'normal',\n          ...props.style,\n        }}\n      />\n    );\n  }\n);\n\nVisuallyHidden.displayName = NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst Root = VisuallyHidden;\n\nexport {\n  VisuallyHidden,\n  //\n  Root,\n};\nexport type { VisuallyHiddenProps };\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { clamp } from '@radix-ui/number';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { createCollection } from '@radix-ui/react-collection';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContextScope } from '@radix-ui/react-context';\nimport { useDirection } from '@radix-ui/react-direction';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { useId } from '@radix-ui/react-id';\nimport * as PopperPrimitive from '@radix-ui/react-popper';\nimport { createPopperScope } from '@radix-ui/react-popper';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { Slot } from '@radix-ui/react-slot';\nimport { useCallbackRef } from '@radix-ui/react-use-callback-ref';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { useLayoutEffect } from '@radix-ui/react-use-layout-effect';\nimport { usePrevious } from '@radix-ui/react-use-previous';\nimport { VisuallyHidden } from '@radix-ui/react-visually-hidden';\nimport { hideOthers } from 'aria-hidden';\nimport { RemoveScroll } from 'react-remove-scroll';\n\nimport type * as Radix from '@radix-ui/react-primitive';\nimport type { Scope } from '@radix-ui/react-context';\n\ntype Direction = 'ltr' | 'rtl';\n\nconst OPEN_KEYS = [' ', 'Enter', 'ArrowUp', 'ArrowDown'];\nconst SELECTION_KEYS = [' ', 'Enter'];\n\n/* -------------------------------------------------------------------------------------------------\n * Select\n * -----------------------------------------------------------------------------------------------*/\n\nconst SELECT_NAME = 'Select';\n\ntype ItemData = { value: string; disabled: boolean; textValue: string };\nconst [Collection, useCollection, createCollectionScope] = createCollection<\n  SelectItemElement,\n  ItemData\n>(SELECT_NAME);\n\ntype ScopedProps<P> = P & { __scopeSelect?: Scope };\nconst [createSelectContext, createSelectScope] = createContextScope(SELECT_NAME, [\n  createCollectionScope,\n  createPopperScope,\n]);\nconst usePopperScope = createPopperScope();\n\ntype SelectContextValue = {\n  trigger: SelectTriggerElement | null;\n  onTriggerChange(node: SelectTriggerElement | null): void;\n  valueNode: SelectValueElement | null;\n  onValueNodeChange(node: SelectValueElement): void;\n  valueNodeHasChildren: boolean;\n  onValueNodeHasChildrenChange(hasChildren: boolean): void;\n  contentId: string;\n  value?: string;\n  onValueChange(value: string): void;\n  open: boolean;\n  required?: boolean;\n  onOpenChange(open: boolean): void;\n  dir: SelectProps['dir'];\n  triggerPointerDownPosRef: React.MutableRefObject<{ x: number; y: number } | null>;\n  disabled?: boolean;\n};\n\nconst [SelectProvider, useSelectContext] = createSelectContext<SelectContextValue>(SELECT_NAME);\n\ntype NativeOption = React.ReactElement<React.ComponentProps<'option'>>;\n\ntype SelectNativeOptionsContextValue = {\n  onNativeOptionAdd(option: NativeOption): void;\n  onNativeOptionRemove(option: NativeOption): void;\n};\nconst [SelectNativeOptionsProvider, useSelectNativeOptionsContext] =\n  createSelectContext<SelectNativeOptionsContextValue>(SELECT_NAME);\n\ninterface SelectProps {\n  children?: React.ReactNode;\n  value?: string;\n  defaultValue?: string;\n  onValueChange?(value: string): void;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  dir?: Direction;\n  name?: string;\n  autoComplete?: string;\n  disabled?: boolean;\n  required?: boolean;\n}\n\nconst Select: React.FC<SelectProps> = (props: ScopedProps<SelectProps>) => {\n  const {\n    __scopeSelect,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    value: valueProp,\n    defaultValue,\n    onValueChange,\n    dir,\n    name,\n    autoComplete,\n    disabled,\n    required,\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n  const [trigger, setTrigger] = React.useState<SelectTriggerElement | null>(null);\n  const [valueNode, setValueNode] = React.useState<SelectValueElement | null>(null);\n  const [valueNodeHasChildren, setValueNodeHasChildren] = React.useState(false);\n  const direction = useDirection(dir);\n  const [open = false, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen,\n    onChange: onOpenChange,\n  });\n  const [value, setValue] = useControllableState({\n    prop: valueProp,\n    defaultProp: defaultValue,\n    onChange: onValueChange,\n  });\n  const triggerPointerDownPosRef = React.useRef<{ x: number; y: number } | null>(null);\n\n  // We set this to true by default so that events bubble to forms without JS (SSR)\n  const isFormControl = trigger ? Boolean(trigger.closest('form')) : true;\n  const [nativeOptionsSet, setNativeOptionsSet] = React.useState(new Set<NativeOption>());\n\n  // The native `select` only associates the correct default value if the corresponding\n  // `option` is rendered as a child **at the same time** as itself.\n  // Because it might take a few renders for our items to gather the information to build\n  // the native `option`(s), we generate a key on the `select` to make sure React re-builds it\n  // each time the options change.\n  const nativeSelectKey = Array.from(nativeOptionsSet)\n    .map((option) => option.props.value)\n    .join(';');\n\n  return (\n    <PopperPrimitive.Root {...popperScope}>\n      <SelectProvider\n        required={required}\n        scope={__scopeSelect}\n        trigger={trigger}\n        onTriggerChange={setTrigger}\n        valueNode={valueNode}\n        onValueNodeChange={setValueNode}\n        valueNodeHasChildren={valueNodeHasChildren}\n        onValueNodeHasChildrenChange={setValueNodeHasChildren}\n        contentId={useId()}\n        value={value}\n        onValueChange={setValue}\n        open={open}\n        onOpenChange={setOpen}\n        dir={direction}\n        triggerPointerDownPosRef={triggerPointerDownPosRef}\n        disabled={disabled}\n      >\n        <Collection.Provider scope={__scopeSelect}>\n          <SelectNativeOptionsProvider\n            scope={props.__scopeSelect}\n            onNativeOptionAdd={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => new Set(prev).add(option));\n            }, [])}\n            onNativeOptionRemove={React.useCallback((option) => {\n              setNativeOptionsSet((prev) => {\n                const optionsSet = new Set(prev);\n                optionsSet.delete(option);\n                return optionsSet;\n              });\n            }, [])}\n          >\n            {children}\n          </SelectNativeOptionsProvider>\n        </Collection.Provider>\n\n        {isFormControl ? (\n          <BubbleSelect\n            key={nativeSelectKey}\n            aria-hidden\n            required={required}\n            tabIndex={-1}\n            name={name}\n            autoComplete={autoComplete}\n            value={value}\n            // enable form autofill\n            onChange={(event) => setValue(event.target.value)}\n            disabled={disabled}\n          >\n            {value === undefined ? <option value=\"\" /> : null}\n            {Array.from(nativeOptionsSet)}\n          </BubbleSelect>\n        ) : null}\n      </SelectProvider>\n    </PopperPrimitive.Root>\n  );\n};\n\nSelect.displayName = SELECT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'SelectTrigger';\n\ntype SelectTriggerElement = React.ElementRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = Radix.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface SelectTriggerProps extends PrimitiveButtonProps {}\n\nconst SelectTrigger = React.forwardRef<SelectTriggerElement, SelectTriggerProps>(\n  (props: ScopedProps<SelectTriggerProps>, forwardedRef) => {\n    const { __scopeSelect, disabled = false, ...triggerProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);\n    const isDisabled = context.disabled || disabled;\n    const composedRefs = useComposedRefs(forwardedRef, context.onTriggerChange);\n    const getItems = useCollection(__scopeSelect);\n\n    const [searchRef, handleTypeaheadSearch, resetTypeahead] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.value === context.value);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem !== undefined) {\n        context.onValueChange(nextItem.value);\n      }\n    });\n\n    const handleOpen = () => {\n      if (!isDisabled) {\n        context.onOpenChange(true);\n        // reset typeahead when we open\n        resetTypeahead();\n      }\n    };\n\n    return (\n      <PopperPrimitive.Anchor asChild {...popperScope}>\n        <Primitive.button\n          type=\"button\"\n          role=\"combobox\"\n          aria-controls={context.contentId}\n          aria-expanded={context.open}\n          aria-required={context.required}\n          aria-autocomplete=\"none\"\n          dir={context.dir}\n          data-state={context.open ? 'open' : 'closed'}\n          disabled={isDisabled}\n          data-disabled={isDisabled ? '' : undefined}\n          data-placeholder={context.value === undefined ? '' : undefined}\n          {...triggerProps}\n          ref={composedRefs}\n          // Enable compatibility with native label or custom `Label` \"click\" for Safari:\n          onClick={composeEventHandlers(triggerProps.onClick, (event) => {\n            // Whilst browsers generally have no issue focusing the trigger when clicking\n            // on a label, Safari seems to struggle with the fact that there's no `onClick`.\n            // We force `focus` in this case. Note: this doesn't create any other side-effect\n            // because we are preventing default in `onPointerDown` so effectively\n            // this only runs for a label \"click\"\n            event.currentTarget.focus();\n          })}\n          onPointerDown={composeEventHandlers(triggerProps.onPointerDown, (event) => {\n            // prevent implicit pointer capture\n            // https://www.w3.org/TR/pointerevents3/#implicit-pointer-capture\n            const target = event.target as HTMLElement;\n            if (target.hasPointerCapture(event.pointerId)) {\n              target.releasePointerCapture(event.pointerId);\n            }\n\n            // only call handler if it's the left button (mousedown gets triggered by all mouse buttons)\n            // but not when the control key is pressed (avoiding MacOS right click)\n            if (event.button === 0 && event.ctrlKey === false) {\n              handleOpen();\n              context.triggerPointerDownPosRef.current = {\n                x: Math.round(event.pageX),\n                y: Math.round(event.pageY),\n              };\n              // prevent trigger from stealing focus from the active item after opening.\n              event.preventDefault();\n            }\n          })}\n          onKeyDown={composeEventHandlers(triggerProps.onKeyDown, (event) => {\n            const isTypingAhead = searchRef.current !== '';\n            const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n            if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n            if (isTypingAhead && event.key === ' ') return;\n            if (OPEN_KEYS.includes(event.key)) {\n              handleOpen();\n              event.preventDefault();\n            }\n          })}\n        />\n      </PopperPrimitive.Anchor>\n    );\n  }\n);\n\nSelectTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectValue\n * -----------------------------------------------------------------------------------------------*/\n\nconst VALUE_NAME = 'SelectValue';\n\ntype SelectValueElement = React.ElementRef<typeof Primitive.span>;\ntype PrimitiveSpanProps = Radix.ComponentPropsWithoutRef<typeof Primitive.span>;\ninterface SelectValueProps extends Omit<PrimitiveSpanProps, 'placeholder'> {\n  placeholder?: React.ReactNode;\n}\n\nconst SelectValue = React.forwardRef<SelectValueElement, SelectValueProps>(\n  (props: ScopedProps<SelectValueProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, children, placeholder, ...valueProps } = props;\n    const context = useSelectContext(VALUE_NAME, __scopeSelect);\n    const { onValueNodeHasChildrenChange } = context;\n    const hasChildren = children !== undefined;\n    const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);\n\n    useLayoutEffect(() => {\n      onValueNodeHasChildrenChange(hasChildren);\n    }, [onValueNodeHasChildrenChange, hasChildren]);\n\n    return (\n      <Primitive.span\n        {...valueProps}\n        ref={composedRefs}\n        // we don't want events from the portalled `SelectValue` children to bubble\n        // through the item they came from\n        style={{ pointerEvents: 'none' }}\n      >\n        {context.value === undefined && placeholder !== undefined ? placeholder : children}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectValue.displayName = VALUE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectIcon\n * -----------------------------------------------------------------------------------------------*/\n\nconst ICON_NAME = 'SelectIcon';\n\ntype SelectIconElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectIconProps extends PrimitiveSpanProps {}\n\nconst SelectIcon = React.forwardRef<SelectIconElement, SelectIconProps>(\n  (props: ScopedProps<SelectIconProps>, forwardedRef) => {\n    const { __scopeSelect, children, ...iconProps } = props;\n    return (\n      <Primitive.span aria-hidden {...iconProps} ref={forwardedRef}>\n        {children || '▼'}\n      </Primitive.span>\n    );\n  }\n);\n\nSelectIcon.displayName = ICON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'SelectPortal';\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface SelectPortalProps extends Omit<PortalProps, 'asChild'> {\n  children?: React.ReactNode;\n}\n\nconst SelectPortal: React.FC<SelectPortalProps> = (props: ScopedProps<SelectPortalProps>) => {\n  return <PortalPrimitive asChild {...props} />;\n};\n\nSelectPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'SelectContent';\n\ntype SelectContentElement = SelectContentImplElement;\ninterface SelectContentProps extends SelectContentImplProps {}\n\nconst SelectContent = React.forwardRef<SelectContentElement, SelectContentProps>(\n  (props: ScopedProps<SelectContentProps>, forwardedRef) => {\n    const context = useSelectContext(CONTENT_NAME, props.__scopeSelect);\n    const [fragment, setFragment] = React.useState<DocumentFragment>();\n\n    // setting the fragment in `useLayoutEffect` as `DocumentFragment` doesn't exist on the server\n    useLayoutEffect(() => {\n      setFragment(new DocumentFragment());\n    }, []);\n\n    if (!context.open) {\n      const frag = fragment as Element | undefined;\n      return frag\n        ? ReactDOM.createPortal(\n            <SelectContentProvider scope={props.__scopeSelect}>\n              <Collection.Slot scope={props.__scopeSelect}>\n                <div>{props.children}</div>\n              </Collection.Slot>\n            </SelectContentProvider>,\n            frag\n          )\n        : null;\n    }\n\n    return <SelectContentImpl {...props} ref={forwardedRef} />;\n  }\n);\n\nSelectContent.displayName = CONTENT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContentImpl\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_MARGIN = 10;\n\ntype SelectContentContextValue = {\n  content?: SelectContentElement | null;\n  viewport?: SelectViewportElement | null;\n  onViewportChange?: (node: SelectViewportElement | null) => void;\n  itemRefCallback?: (node: SelectItemElement | null, value: string, disabled: boolean) => void;\n  selectedItem?: SelectItemElement | null;\n  onItemLeave?: () => void;\n  itemTextRefCallback?: (\n    node: SelectItemTextElement | null,\n    value: string,\n    disabled: boolean\n  ) => void;\n  focusSelectedItem?: () => void;\n  selectedItemText?: SelectItemTextElement | null;\n  position?: SelectContentProps['position'];\n  isPositioned?: boolean;\n  searchRef?: React.RefObject<string>;\n};\n\nconst [SelectContentProvider, useSelectContentContext] =\n  createSelectContext<SelectContentContextValue>(CONTENT_NAME);\n\nconst CONTENT_IMPL_NAME = 'SelectContentImpl';\n\ntype SelectContentImplElement = SelectPopperPositionElement | SelectItemAlignedPositionElement;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = Radix.ComponentPropsWithoutRef<typeof FocusScope>;\n\ntype SelectPopperPrivateProps = { onPlaced?: PopperContentProps['onPlaced'] };\n\ninterface SelectContentImplProps\n  extends Omit<SelectPopperPositionProps, keyof SelectPopperPrivateProps>,\n    Omit<SelectItemAlignedPositionProps, keyof SelectPopperPrivateProps> {\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n  /**\n   * Event handler called when the escape key is down.\n   * Can be prevented.\n   */\n  onEscapeKeyDown?: DismissableLayerProps['onEscapeKeyDown'];\n  /**\n   * Event handler called when the a `pointerdown` event happens outside of the `DismissableLayer`.\n   * Can be prevented.\n   */\n  onPointerDownOutside?: DismissableLayerProps['onPointerDownOutside'];\n\n  position?: 'item-aligned' | 'popper';\n}\n\nconst SelectContentImpl = React.forwardRef<SelectContentImplElement, SelectContentImplProps>(\n  (props: ScopedProps<SelectContentImplProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      position = 'item-aligned',\n      onCloseAutoFocus,\n      onEscapeKeyDown,\n      onPointerDownOutside,\n      //\n      // PopperContent props\n      side,\n      sideOffset,\n      align,\n      alignOffset,\n      arrowPadding,\n      collisionBoundary,\n      collisionPadding,\n      sticky,\n      hideWhenDetached,\n      avoidCollisions,\n      //\n      ...contentProps\n    } = props;\n    const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n    const [content, setContent] = React.useState<SelectContentImplElement | null>(null);\n    const [viewport, setViewport] = React.useState<SelectViewportElement | null>(null);\n    const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n    const [selectedItem, setSelectedItem] = React.useState<SelectItemElement | null>(null);\n    const [selectedItemText, setSelectedItemText] = React.useState<SelectItemTextElement | null>(\n      null\n    );\n    const getItems = useCollection(__scopeSelect);\n    const [isPositioned, setIsPositioned] = React.useState(false);\n    const firstValidItemFoundRef = React.useRef(false);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      if (content) return hideOthers(content);\n    }, [content]);\n\n    // Make sure the whole tree has focus guards as our `Select` may be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    const focusFirst = React.useCallback(\n      (candidates: Array<HTMLElement | null>) => {\n        const [firstItem, ...restItems] = getItems().map((item) => item.ref.current);\n        const [lastItem] = restItems.slice(-1);\n\n        const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;\n        for (const candidate of candidates) {\n          // if focus is already where we want to go, we don't want to keep going through the candidates\n          if (candidate === PREVIOUSLY_FOCUSED_ELEMENT) return;\n          candidate?.scrollIntoView({ block: 'nearest' });\n          // viewport might have padding so scroll to its edges when focusing first/last items.\n          if (candidate === firstItem && viewport) viewport.scrollTop = 0;\n          if (candidate === lastItem && viewport) viewport.scrollTop = viewport.scrollHeight;\n          candidate?.focus();\n          if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT) return;\n        }\n      },\n      [getItems, viewport]\n    );\n\n    const focusSelectedItem = React.useCallback(\n      () => focusFirst([selectedItem, content]),\n      [focusFirst, selectedItem, content]\n    );\n\n    // Since this is not dependent on layout, we want to ensure this runs at the same time as\n    // other effects across components. Hence why we don't call `focusSelectedItem` inside `position`.\n    React.useEffect(() => {\n      if (isPositioned) {\n        focusSelectedItem();\n      }\n    }, [isPositioned, focusSelectedItem]);\n\n    // prevent selecting items on `pointerup` in some cases after opening from `pointerdown`\n    // and close on `pointerup` outside.\n    const { onOpenChange, triggerPointerDownPosRef } = context;\n    React.useEffect(() => {\n      if (content) {\n        let pointerMoveDelta = { x: 0, y: 0 };\n\n        const handlePointerMove = (event: PointerEvent) => {\n          pointerMoveDelta = {\n            x: Math.abs(Math.round(event.pageX) - (triggerPointerDownPosRef.current?.x ?? 0)),\n            y: Math.abs(Math.round(event.pageY) - (triggerPointerDownPosRef.current?.y ?? 0)),\n          };\n        };\n        const handlePointerUp = (event: PointerEvent) => {\n          // If the pointer hasn't moved by a certain threshold then we prevent selecting item on `pointerup`.\n          if (pointerMoveDelta.x <= 10 && pointerMoveDelta.y <= 10) {\n            event.preventDefault();\n          } else {\n            // otherwise, if the event was outside the content, close.\n            if (!content.contains(event.target as HTMLElement)) {\n              onOpenChange(false);\n            }\n          }\n          document.removeEventListener('pointermove', handlePointerMove);\n          triggerPointerDownPosRef.current = null;\n        };\n\n        if (triggerPointerDownPosRef.current !== null) {\n          document.addEventListener('pointermove', handlePointerMove);\n          document.addEventListener('pointerup', handlePointerUp, { capture: true, once: true });\n        }\n\n        return () => {\n          document.removeEventListener('pointermove', handlePointerMove);\n          document.removeEventListener('pointerup', handlePointerUp, { capture: true });\n        };\n      }\n    }, [content, onOpenChange, triggerPointerDownPosRef]);\n\n    React.useEffect(() => {\n      const close = () => onOpenChange(false);\n      window.addEventListener('blur', close);\n      window.addEventListener('resize', close);\n      return () => {\n        window.removeEventListener('blur', close);\n        window.removeEventListener('resize', close);\n      };\n    }, [onOpenChange]);\n\n    const [searchRef, handleTypeaheadSearch] = useTypeaheadSearch((search) => {\n      const enabledItems = getItems().filter((item) => !item.disabled);\n      const currentItem = enabledItems.find((item) => item.ref.current === document.activeElement);\n      const nextItem = findNextItem(enabledItems, search, currentItem);\n      if (nextItem) {\n        /**\n         * Imperative focus during keydown is risky so we prevent React's batching updates\n         * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n         */\n        setTimeout(() => (nextItem.ref.current as HTMLElement).focus());\n      }\n    });\n\n    const itemRefCallback = React.useCallback(\n      (node: SelectItemElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItem(node);\n          if (isFirstValidItem) firstValidItemFoundRef.current = true;\n        }\n      },\n      [context.value]\n    );\n    const handleItemLeave = React.useCallback(() => content?.focus(), [content]);\n    const itemTextRefCallback = React.useCallback(\n      (node: SelectItemTextElement | null, value: string, disabled: boolean) => {\n        const isFirstValidItem = !firstValidItemFoundRef.current && !disabled;\n        const isSelectedItem = context.value !== undefined && context.value === value;\n        if (isSelectedItem || isFirstValidItem) {\n          setSelectedItemText(node);\n        }\n      },\n      [context.value]\n    );\n\n    const SelectPosition = position === 'popper' ? SelectPopperPosition : SelectItemAlignedPosition;\n\n    // Silently ignore props that are not supported by `SelectItemAlignedPosition`\n    const popperContentProps =\n      SelectPosition === SelectPopperPosition\n        ? {\n            side,\n            sideOffset,\n            align,\n            alignOffset,\n            arrowPadding,\n            collisionBoundary,\n            collisionPadding,\n            sticky,\n            hideWhenDetached,\n            avoidCollisions,\n          }\n        : {};\n\n    return (\n      <SelectContentProvider\n        scope={__scopeSelect}\n        content={content}\n        viewport={viewport}\n        onViewportChange={setViewport}\n        itemRefCallback={itemRefCallback}\n        selectedItem={selectedItem}\n        onItemLeave={handleItemLeave}\n        itemTextRefCallback={itemTextRefCallback}\n        focusSelectedItem={focusSelectedItem}\n        selectedItemText={selectedItemText}\n        position={position}\n        isPositioned={isPositioned}\n        searchRef={searchRef}\n      >\n        <RemoveScroll as={Slot} allowPinchZoom>\n          <FocusScope\n            asChild\n            // we make sure we're not trapping once it's been closed\n            // (closed !== unmounted when animating out)\n            trapped={context.open}\n            onMountAutoFocus={(event) => {\n              // we prevent open autofocus because we manually focus the selected item\n              event.preventDefault();\n            }}\n            onUnmountAutoFocus={composeEventHandlers(onCloseAutoFocus, (event) => {\n              context.trigger?.focus({ preventScroll: true });\n              event.preventDefault();\n            })}\n          >\n            <DismissableLayer\n              asChild\n              disableOutsidePointerEvents\n              onEscapeKeyDown={onEscapeKeyDown}\n              onPointerDownOutside={onPointerDownOutside}\n              // When focus is trapped, a focusout event may still happen.\n              // We make sure we don't trigger our `onDismiss` in such case.\n              onFocusOutside={(event) => event.preventDefault()}\n              onDismiss={() => context.onOpenChange(false)}\n            >\n              <SelectPosition\n                role=\"listbox\"\n                id={context.contentId}\n                data-state={context.open ? 'open' : 'closed'}\n                dir={context.dir}\n                onContextMenu={(event) => event.preventDefault()}\n                {...contentProps}\n                {...popperContentProps}\n                onPlaced={() => setIsPositioned(true)}\n                ref={composedRefs}\n                style={{\n                  // flex layout so we can place the scroll buttons properly\n                  display: 'flex',\n                  flexDirection: 'column',\n                  // reset the outline by default as the content MAY get focused\n                  outline: 'none',\n                  ...contentProps.style,\n                }}\n                onKeyDown={composeEventHandlers(contentProps.onKeyDown, (event) => {\n                  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n\n                  // select should not be navigated using tab key so we prevent it\n                  if (event.key === 'Tab') event.preventDefault();\n\n                  if (!isModifierKey && event.key.length === 1) handleTypeaheadSearch(event.key);\n\n                  if (['ArrowUp', 'ArrowDown', 'Home', 'End'].includes(event.key)) {\n                    const items = getItems().filter((item) => !item.disabled);\n                    let candidateNodes = items.map((item) => item.ref.current!);\n\n                    if (['ArrowUp', 'End'].includes(event.key)) {\n                      candidateNodes = candidateNodes.slice().reverse();\n                    }\n                    if (['ArrowUp', 'ArrowDown'].includes(event.key)) {\n                      const currentElement = event.target as SelectItemElement;\n                      const currentIndex = candidateNodes.indexOf(currentElement);\n                      candidateNodes = candidateNodes.slice(currentIndex + 1);\n                    }\n\n                    /**\n                     * Imperative focus during keydown is risky so we prevent React's batching updates\n                     * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n                     */\n                    setTimeout(() => focusFirst(candidateNodes));\n\n                    event.preventDefault();\n                  }\n                })}\n              />\n            </DismissableLayer>\n          </FocusScope>\n        </RemoveScroll>\n      </SelectContentProvider>\n    );\n  }\n);\n\nSelectContentImpl.displayName = CONTENT_IMPL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemAlignedPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_ALIGNED_POSITION_NAME = 'SelectItemAlignedPosition';\n\ntype SelectItemAlignedPositionElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemAlignedPositionProps extends PrimitiveDivProps, SelectPopperPrivateProps {}\n\nconst SelectItemAlignedPosition = React.forwardRef<\n  SelectItemAlignedPositionElement,\n  SelectItemAlignedPositionProps\n>((props: ScopedProps<SelectItemAlignedPositionProps>, forwardedRef) => {\n  const { __scopeSelect, onPlaced, ...popperProps } = props;\n  const context = useSelectContext(CONTENT_NAME, __scopeSelect);\n  const contentContext = useSelectContentContext(CONTENT_NAME, __scopeSelect);\n  const [contentWrapper, setContentWrapper] = React.useState<HTMLDivElement | null>(null);\n  const [content, setContent] = React.useState<SelectItemAlignedPositionElement | null>(null);\n  const composedRefs = useComposedRefs(forwardedRef, (node) => setContent(node));\n  const getItems = useCollection(__scopeSelect);\n  const shouldExpandOnScrollRef = React.useRef(false);\n  const shouldRepositionRef = React.useRef(true);\n\n  const { viewport, selectedItem, selectedItemText, focusSelectedItem } = contentContext;\n  const position = React.useCallback(() => {\n    if (\n      context.trigger &&\n      context.valueNode &&\n      contentWrapper &&\n      content &&\n      viewport &&\n      selectedItem &&\n      selectedItemText\n    ) {\n      const triggerRect = context.trigger.getBoundingClientRect();\n\n      // -----------------------------------------------------------------------------------------\n      //  Horizontal positioning\n      // -----------------------------------------------------------------------------------------\n      const contentRect = content.getBoundingClientRect();\n      const valueNodeRect = context.valueNode.getBoundingClientRect();\n      const itemTextRect = selectedItemText.getBoundingClientRect();\n\n      if (context.dir !== 'rtl') {\n        const itemTextOffset = itemTextRect.left - contentRect.left;\n        const left = valueNodeRect.left - itemTextOffset;\n        const leftDelta = triggerRect.left - left;\n        const minContentWidth = triggerRect.width + leftDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const rightEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedLeft = clamp(left, [CONTENT_MARGIN, rightEdge - contentWidth]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.left = clampedLeft + 'px';\n      } else {\n        const itemTextOffset = contentRect.right - itemTextRect.right;\n        const right = window.innerWidth - valueNodeRect.right - itemTextOffset;\n        const rightDelta = window.innerWidth - triggerRect.right - right;\n        const minContentWidth = triggerRect.width + rightDelta;\n        const contentWidth = Math.max(minContentWidth, contentRect.width);\n        const leftEdge = window.innerWidth - CONTENT_MARGIN;\n        const clampedRight = clamp(right, [CONTENT_MARGIN, leftEdge - contentWidth]);\n\n        contentWrapper.style.minWidth = minContentWidth + 'px';\n        contentWrapper.style.right = clampedRight + 'px';\n      }\n\n      // -----------------------------------------------------------------------------------------\n      // Vertical positioning\n      // -----------------------------------------------------------------------------------------\n      const items = getItems();\n      const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n      const itemsHeight = viewport.scrollHeight;\n\n      const contentStyles = window.getComputedStyle(content);\n      const contentBorderTopWidth = parseInt(contentStyles.borderTopWidth, 10);\n      const contentPaddingTop = parseInt(contentStyles.paddingTop, 10);\n      const contentBorderBottomWidth = parseInt(contentStyles.borderBottomWidth, 10);\n      const contentPaddingBottom = parseInt(contentStyles.paddingBottom, 10);\n      const fullContentHeight = contentBorderTopWidth + contentPaddingTop + itemsHeight + contentPaddingBottom + contentBorderBottomWidth; // prettier-ignore\n      const minContentHeight = Math.min(selectedItem.offsetHeight * 5, fullContentHeight);\n\n      const viewportStyles = window.getComputedStyle(viewport);\n      const viewportPaddingTop = parseInt(viewportStyles.paddingTop, 10);\n      const viewportPaddingBottom = parseInt(viewportStyles.paddingBottom, 10);\n\n      const topEdgeToTriggerMiddle = triggerRect.top + triggerRect.height / 2 - CONTENT_MARGIN;\n      const triggerMiddleToBottomEdge = availableHeight - topEdgeToTriggerMiddle;\n\n      const selectedItemHalfHeight = selectedItem.offsetHeight / 2;\n      const itemOffsetMiddle = selectedItem.offsetTop + selectedItemHalfHeight;\n      const contentTopToItemMiddle = contentBorderTopWidth + contentPaddingTop + itemOffsetMiddle;\n      const itemMiddleToContentBottom = fullContentHeight - contentTopToItemMiddle;\n\n      const willAlignWithoutTopOverflow = contentTopToItemMiddle <= topEdgeToTriggerMiddle;\n\n      if (willAlignWithoutTopOverflow) {\n        const isLastItem = selectedItem === items[items.length - 1].ref.current;\n        contentWrapper.style.bottom = 0 + 'px';\n        const viewportOffsetBottom =\n          content.clientHeight - viewport.offsetTop - viewport.offsetHeight;\n        const clampedTriggerMiddleToBottomEdge = Math.max(\n          triggerMiddleToBottomEdge,\n          selectedItemHalfHeight +\n            // viewport might have padding bottom, include it to avoid a scrollable viewport\n            (isLastItem ? viewportPaddingBottom : 0) +\n            viewportOffsetBottom +\n            contentBorderBottomWidth\n        );\n        const height = contentTopToItemMiddle + clampedTriggerMiddleToBottomEdge;\n        contentWrapper.style.height = height + 'px';\n      } else {\n        const isFirstItem = selectedItem === items[0].ref.current;\n        contentWrapper.style.top = 0 + 'px';\n        const clampedTopEdgeToTriggerMiddle = Math.max(\n          topEdgeToTriggerMiddle,\n          contentBorderTopWidth +\n            viewport.offsetTop +\n            // viewport might have padding top, include it to avoid a scrollable viewport\n            (isFirstItem ? viewportPaddingTop : 0) +\n            selectedItemHalfHeight\n        );\n        const height = clampedTopEdgeToTriggerMiddle + itemMiddleToContentBottom;\n        contentWrapper.style.height = height + 'px';\n        viewport.scrollTop = contentTopToItemMiddle - topEdgeToTriggerMiddle + viewport.offsetTop;\n      }\n\n      contentWrapper.style.margin = `${CONTENT_MARGIN}px 0`;\n      contentWrapper.style.minHeight = minContentHeight + 'px';\n      contentWrapper.style.maxHeight = availableHeight + 'px';\n      // -----------------------------------------------------------------------------------------\n\n      onPlaced?.();\n\n      // we don't want the initial scroll position adjustment to trigger \"expand on scroll\"\n      // so we explicitly turn it on only after they've registered.\n      requestAnimationFrame(() => (shouldExpandOnScrollRef.current = true));\n    }\n  }, [\n    getItems,\n    context.trigger,\n    context.valueNode,\n    contentWrapper,\n    content,\n    viewport,\n    selectedItem,\n    selectedItemText,\n    context.dir,\n    onPlaced,\n  ]);\n\n  useLayoutEffect(() => position(), [position]);\n\n  // copy z-index from content to wrapper\n  const [contentZIndex, setContentZIndex] = React.useState<string>();\n  useLayoutEffect(() => {\n    if (content) setContentZIndex(window.getComputedStyle(content).zIndex);\n  }, [content]);\n\n  // When the viewport becomes scrollable at the top, the scroll up button will mount.\n  // Because it is part of the normal flow, it will push down the viewport, thus throwing our\n  // trigger => selectedItem alignment off by the amount the viewport was pushed down.\n  // We wait for this to happen and then re-run the positining logic one more time to account for it.\n  const handleScrollButtonChange = React.useCallback(\n    (node: SelectScrollButtonImplElement | null) => {\n      if (node && shouldRepositionRef.current === true) {\n        position();\n        focusSelectedItem?.();\n        shouldRepositionRef.current = false;\n      }\n    },\n    [position, focusSelectedItem]\n  );\n\n  return (\n    <SelectViewportProvider\n      scope={__scopeSelect}\n      contentWrapper={contentWrapper}\n      shouldExpandOnScrollRef={shouldExpandOnScrollRef}\n      onScrollButtonChange={handleScrollButtonChange}\n    >\n      <div\n        ref={setContentWrapper}\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          position: 'fixed',\n          zIndex: contentZIndex,\n        }}\n      >\n        <Primitive.div\n          {...popperProps}\n          ref={composedRefs}\n          style={{\n            // When we get the height of the content, it includes borders. If we were to set\n            // the height without having `boxSizing: 'border-box'` it would be too big.\n            boxSizing: 'border-box',\n            // We need to ensure the content doesn't get taller than the wrapper\n            maxHeight: '100%',\n            ...popperProps.style,\n          }}\n        />\n      </div>\n    </SelectViewportProvider>\n  );\n});\n\nSelectItemAlignedPosition.displayName = ITEM_ALIGNED_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectPopperPosition\n * -----------------------------------------------------------------------------------------------*/\n\nconst POPPER_POSITION_NAME = 'SelectPopperPosition';\n\ntype SelectPopperPositionElement = React.ElementRef<typeof PopperPrimitive.Content>;\ntype PopperContentProps = React.ComponentPropsWithoutRef<typeof PopperPrimitive.Content>;\ninterface SelectPopperPositionProps extends PopperContentProps, SelectPopperPrivateProps {}\n\nconst SelectPopperPosition = React.forwardRef<\n  SelectPopperPositionElement,\n  SelectPopperPositionProps\n>((props: ScopedProps<SelectPopperPositionProps>, forwardedRef) => {\n  const {\n    __scopeSelect,\n    align = 'start',\n    collisionPadding = CONTENT_MARGIN,\n    ...popperProps\n  } = props;\n  const popperScope = usePopperScope(__scopeSelect);\n\n  return (\n    <PopperPrimitive.Content\n      {...popperScope}\n      {...popperProps}\n      ref={forwardedRef}\n      align={align}\n      collisionPadding={collisionPadding}\n      style={{\n        // Ensure border-box for floating-ui calculations\n        boxSizing: 'border-box',\n        ...popperProps.style,\n        // re-namespace exposed content custom properties\n        ...{\n          '--radix-select-content-transform-origin': 'var(--radix-popper-transform-origin)',\n          '--radix-select-content-available-width': 'var(--radix-popper-available-width)',\n          '--radix-select-content-available-height': 'var(--radix-popper-available-height)',\n          '--radix-select-trigger-width': 'var(--radix-popper-anchor-width)',\n          '--radix-select-trigger-height': 'var(--radix-popper-anchor-height)',\n        },\n      }}\n    />\n  );\n});\n\nSelectPopperPosition.displayName = POPPER_POSITION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectViewport\n * -----------------------------------------------------------------------------------------------*/\n\ntype SelectViewportContextValue = {\n  contentWrapper?: HTMLDivElement | null;\n  shouldExpandOnScrollRef?: React.RefObject<boolean>;\n  onScrollButtonChange?: (node: SelectScrollButtonImplElement | null) => void;\n};\n\nconst [SelectViewportProvider, useSelectViewportContext] =\n  createSelectContext<SelectViewportContextValue>(CONTENT_NAME, {});\n\nconst VIEWPORT_NAME = 'SelectViewport';\n\ntype SelectViewportElement = React.ElementRef<typeof Primitive.div>;\ntype PrimitiveDivProps = Radix.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface SelectViewportProps extends PrimitiveDivProps {}\n\nconst SelectViewport = React.forwardRef<SelectViewportElement, SelectViewportProps>(\n  (props: ScopedProps<SelectViewportProps>, forwardedRef) => {\n    const { __scopeSelect, ...viewportProps } = props;\n    const contentContext = useSelectContentContext(VIEWPORT_NAME, __scopeSelect);\n    const viewportContext = useSelectViewportContext(VIEWPORT_NAME, __scopeSelect);\n    const composedRefs = useComposedRefs(forwardedRef, contentContext.onViewportChange);\n    const prevScrollTopRef = React.useRef(0);\n    return (\n      <>\n        {/* Hide scrollbars cross-browser and enable momentum scroll for touch devices */}\n        <style\n          dangerouslySetInnerHTML={{\n            __html: `[data-radix-select-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-select-viewport]::-webkit-scrollbar{display:none}`,\n          }}\n        />\n        <Collection.Slot scope={__scopeSelect}>\n          <Primitive.div\n            data-radix-select-viewport=\"\"\n            role=\"presentation\"\n            {...viewportProps}\n            ref={composedRefs}\n            style={{\n              // we use position: 'relative' here on the `viewport` so that when we call\n              // `selectedItem.offsetTop` in calculations, the offset is relative to the viewport\n              // (independent of the scrollUpButton).\n              position: 'relative',\n              flex: 1,\n              overflow: 'auto',\n              ...viewportProps.style,\n            }}\n            onScroll={composeEventHandlers(viewportProps.onScroll, (event) => {\n              const viewport = event.currentTarget;\n              const { contentWrapper, shouldExpandOnScrollRef } = viewportContext;\n              if (shouldExpandOnScrollRef?.current && contentWrapper) {\n                const scrolledBy = Math.abs(prevScrollTopRef.current - viewport.scrollTop);\n                if (scrolledBy > 0) {\n                  const availableHeight = window.innerHeight - CONTENT_MARGIN * 2;\n                  const cssMinHeight = parseFloat(contentWrapper.style.minHeight);\n                  const cssHeight = parseFloat(contentWrapper.style.height);\n                  const prevHeight = Math.max(cssMinHeight, cssHeight);\n\n                  if (prevHeight < availableHeight) {\n                    const nextHeight = prevHeight + scrolledBy;\n                    const clampedNextHeight = Math.min(availableHeight, nextHeight);\n                    const heightDiff = nextHeight - clampedNextHeight;\n\n                    contentWrapper.style.height = clampedNextHeight + 'px';\n                    if (contentWrapper.style.bottom === '0px') {\n                      viewport.scrollTop = heightDiff > 0 ? heightDiff : 0;\n                      // ensure the content stays pinned to the bottom\n                      contentWrapper.style.justifyContent = 'flex-end';\n                    }\n                  }\n                }\n              }\n              prevScrollTopRef.current = viewport.scrollTop;\n            })}\n          />\n        </Collection.Slot>\n      </>\n    );\n  }\n);\n\nSelectViewport.displayName = VIEWPORT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectGroup\n * -----------------------------------------------------------------------------------------------*/\n\nconst GROUP_NAME = 'SelectGroup';\n\ntype SelectGroupContextValue = { id: string };\n\nconst [SelectGroupContextProvider, useSelectGroupContext] =\n  createSelectContext<SelectGroupContextValue>(GROUP_NAME);\n\ntype SelectGroupElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectGroupProps extends PrimitiveDivProps {}\n\nconst SelectGroup = React.forwardRef<SelectGroupElement, SelectGroupProps>(\n  (props: ScopedProps<SelectGroupProps>, forwardedRef) => {\n    const { __scopeSelect, ...groupProps } = props;\n    const groupId = useId();\n    return (\n      <SelectGroupContextProvider scope={__scopeSelect} id={groupId}>\n        <Primitive.div role=\"group\" aria-labelledby={groupId} {...groupProps} ref={forwardedRef} />\n      </SelectGroupContextProvider>\n    );\n  }\n);\n\nSelectGroup.displayName = GROUP_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectLabel\n * -----------------------------------------------------------------------------------------------*/\n\nconst LABEL_NAME = 'SelectLabel';\n\ntype SelectLabelElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectLabelProps extends PrimitiveDivProps {}\n\nconst SelectLabel = React.forwardRef<SelectLabelElement, SelectLabelProps>(\n  (props: ScopedProps<SelectLabelProps>, forwardedRef) => {\n    const { __scopeSelect, ...labelProps } = props;\n    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);\n    return <Primitive.div id={groupContext.id} {...labelProps} ref={forwardedRef} />;\n  }\n);\n\nSelectLabel.displayName = LABEL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItem\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_NAME = 'SelectItem';\n\ntype SelectItemContextValue = {\n  value: string;\n  disabled: boolean;\n  textId: string;\n  isSelected: boolean;\n  onItemTextChange(node: SelectItemTextElement | null): void;\n};\n\nconst [SelectItemContextProvider, useSelectItemContext] =\n  createSelectContext<SelectItemContextValue>(ITEM_NAME);\n\ntype SelectItemElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectItemProps extends PrimitiveDivProps {\n  value: string;\n  disabled?: boolean;\n  textValue?: string;\n}\n\nconst SelectItem = React.forwardRef<SelectItemElement, SelectItemProps>(\n  (props: ScopedProps<SelectItemProps>, forwardedRef) => {\n    const {\n      __scopeSelect,\n      value,\n      disabled = false,\n      textValue: textValueProp,\n      ...itemProps\n    } = props;\n    const context = useSelectContext(ITEM_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_NAME, __scopeSelect);\n    const isSelected = context.value === value;\n    const [textValue, setTextValue] = React.useState(textValueProp ?? '');\n    const [isFocused, setIsFocused] = React.useState(false);\n    const composedRefs = useComposedRefs(forwardedRef, (node) =>\n      contentContext.itemRefCallback?.(node, value, disabled)\n    );\n    const textId = useId();\n\n    const handleSelect = () => {\n      if (!disabled) {\n        context.onValueChange(value);\n        context.onOpenChange(false);\n      }\n    };\n\n    return (\n      <SelectItemContextProvider\n        scope={__scopeSelect}\n        value={value}\n        disabled={disabled}\n        textId={textId}\n        isSelected={isSelected}\n        onItemTextChange={React.useCallback((node) => {\n          setTextValue((prevTextValue) => prevTextValue || (node?.textContent ?? '').trim());\n        }, [])}\n      >\n        <Collection.ItemSlot\n          scope={__scopeSelect}\n          value={value}\n          disabled={disabled}\n          textValue={textValue}\n        >\n          <Primitive.div\n            role=\"option\"\n            aria-labelledby={textId}\n            data-highlighted={isFocused ? '' : undefined}\n            // `isFocused` caveat fixes stuttering in VoiceOver\n            aria-selected={isSelected && isFocused}\n            data-state={isSelected ? 'checked' : 'unchecked'}\n            aria-disabled={disabled || undefined}\n            data-disabled={disabled ? '' : undefined}\n            tabIndex={disabled ? undefined : -1}\n            {...itemProps}\n            ref={composedRefs}\n            onFocus={composeEventHandlers(itemProps.onFocus, () => setIsFocused(true))}\n            onBlur={composeEventHandlers(itemProps.onBlur, () => setIsFocused(false))}\n            onPointerUp={composeEventHandlers(itemProps.onPointerUp, handleSelect)}\n            onPointerMove={composeEventHandlers(itemProps.onPointerMove, (event) => {\n              if (disabled) {\n                contentContext.onItemLeave?.();\n              } else {\n                // even though safari doesn't support this option, it's acceptable\n                // as it only means it might scroll a few pixels when using the pointer.\n                event.currentTarget.focus({ preventScroll: true });\n              }\n            })}\n            onPointerLeave={composeEventHandlers(itemProps.onPointerLeave, (event) => {\n              if (event.currentTarget === document.activeElement) {\n                contentContext.onItemLeave?.();\n              }\n            })}\n            onKeyDown={composeEventHandlers(itemProps.onKeyDown, (event) => {\n              const isTypingAhead = contentContext.searchRef?.current !== '';\n              if (isTypingAhead && event.key === ' ') return;\n              if (SELECTION_KEYS.includes(event.key)) handleSelect();\n              // prevent page scroll if using the space key to select an item\n              if (event.key === ' ') event.preventDefault();\n            })}\n          />\n        </Collection.ItemSlot>\n      </SelectItemContextProvider>\n    );\n  }\n);\n\nSelectItem.displayName = ITEM_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemText\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_TEXT_NAME = 'SelectItemText';\n\ntype SelectItemTextElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemTextProps extends PrimitiveSpanProps {}\n\nconst SelectItemText = React.forwardRef<SelectItemTextElement, SelectItemTextProps>(\n  (props: ScopedProps<SelectItemTextProps>, forwardedRef) => {\n    // We ignore `className` and `style` as this part shouldn't be styled.\n    const { __scopeSelect, className, style, ...itemTextProps } = props;\n    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ITEM_TEXT_NAME, __scopeSelect);\n    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);\n    const nativeOptionsContext = useSelectNativeOptionsContext(ITEM_TEXT_NAME, __scopeSelect);\n    const [itemTextNode, setItemTextNode] = React.useState<SelectItemTextElement | null>(null);\n    const composedRefs = useComposedRefs(\n      forwardedRef,\n      (node) => setItemTextNode(node),\n      itemContext.onItemTextChange,\n      (node) => contentContext.itemTextRefCallback?.(node, itemContext.value, itemContext.disabled)\n    );\n\n    const textContent = itemTextNode?.textContent;\n    const nativeOption = React.useMemo(\n      () => (\n        <option key={itemContext.value} value={itemContext.value} disabled={itemContext.disabled}>\n          {textContent}\n        </option>\n      ),\n      [itemContext.disabled, itemContext.value, textContent]\n    );\n\n    const { onNativeOptionAdd, onNativeOptionRemove } = nativeOptionsContext;\n    useLayoutEffect(() => {\n      onNativeOptionAdd(nativeOption);\n      return () => onNativeOptionRemove(nativeOption);\n    }, [onNativeOptionAdd, onNativeOptionRemove, nativeOption]);\n\n    return (\n      <>\n        <Primitive.span id={itemContext.textId} {...itemTextProps} ref={composedRefs} />\n\n        {/* Portal the select item text into the trigger value node */}\n        {itemContext.isSelected && context.valueNode && !context.valueNodeHasChildren\n          ? ReactDOM.createPortal(itemTextProps.children, context.valueNode)\n          : null}\n      </>\n    );\n  }\n);\n\nSelectItemText.displayName = ITEM_TEXT_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectItemIndicator\n * -----------------------------------------------------------------------------------------------*/\n\nconst ITEM_INDICATOR_NAME = 'SelectItemIndicator';\n\ntype SelectItemIndicatorElement = React.ElementRef<typeof Primitive.span>;\ninterface SelectItemIndicatorProps extends PrimitiveSpanProps {}\n\nconst SelectItemIndicator = React.forwardRef<SelectItemIndicatorElement, SelectItemIndicatorProps>(\n  (props: ScopedProps<SelectItemIndicatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...itemIndicatorProps } = props;\n    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);\n    return itemContext.isSelected ? (\n      <Primitive.span aria-hidden {...itemIndicatorProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectItemIndicator.displayName = ITEM_INDICATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollUpButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_UP_BUTTON_NAME = 'SelectScrollUpButton';\n\ntype SelectScrollUpButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollUpButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollUpButton = React.forwardRef<\n  SelectScrollUpButtonElement,\n  SelectScrollUpButtonProps\n>((props: ScopedProps<SelectScrollUpButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_UP_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollUp, setCanScrollUp] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const canScrollUp = viewport.scrollTop > 0;\n        setCanScrollUp(canScrollUp);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollUp ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop - selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectScrollDownButton\n * -----------------------------------------------------------------------------------------------*/\n\nconst SCROLL_DOWN_BUTTON_NAME = 'SelectScrollDownButton';\n\ntype SelectScrollDownButtonElement = SelectScrollButtonImplElement;\ninterface SelectScrollDownButtonProps extends Omit<SelectScrollButtonImplProps, 'onAutoScroll'> {}\n\nconst SelectScrollDownButton = React.forwardRef<\n  SelectScrollDownButtonElement,\n  SelectScrollDownButtonProps\n>((props: ScopedProps<SelectScrollDownButtonProps>, forwardedRef) => {\n  const contentContext = useSelectContentContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const viewportContext = useSelectViewportContext(SCROLL_DOWN_BUTTON_NAME, props.__scopeSelect);\n  const [canScrollDown, setCanScrollDown] = React.useState(false);\n  const composedRefs = useComposedRefs(forwardedRef, viewportContext.onScrollButtonChange);\n\n  useLayoutEffect(() => {\n    if (contentContext.viewport && contentContext.isPositioned) {\n      const viewport = contentContext.viewport;\n      function handleScroll() {\n        const maxScroll = viewport.scrollHeight - viewport.clientHeight;\n        // we use Math.ceil here because if the UI is zoomed-in\n        // `scrollTop` is not always reported as an integer\n        const canScrollDown = Math.ceil(viewport.scrollTop) < maxScroll;\n        setCanScrollDown(canScrollDown);\n      }\n      handleScroll();\n      viewport.addEventListener('scroll', handleScroll);\n      return () => viewport.removeEventListener('scroll', handleScroll);\n    }\n  }, [contentContext.viewport, contentContext.isPositioned]);\n\n  return canScrollDown ? (\n    <SelectScrollButtonImpl\n      {...props}\n      ref={composedRefs}\n      onAutoScroll={() => {\n        const { viewport, selectedItem } = contentContext;\n        if (viewport && selectedItem) {\n          viewport.scrollTop = viewport.scrollTop + selectedItem.offsetHeight;\n        }\n      }}\n    />\n  ) : null;\n});\n\nSelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;\n\ntype SelectScrollButtonImplElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectScrollButtonImplProps extends PrimitiveDivProps {\n  onAutoScroll(): void;\n}\n\nconst SelectScrollButtonImpl = React.forwardRef<\n  SelectScrollButtonImplElement,\n  SelectScrollButtonImplProps\n>((props: ScopedProps<SelectScrollButtonImplProps>, forwardedRef) => {\n  const { __scopeSelect, onAutoScroll, ...scrollIndicatorProps } = props;\n  const contentContext = useSelectContentContext('SelectScrollButton', __scopeSelect);\n  const autoScrollTimerRef = React.useRef<number | null>(null);\n  const getItems = useCollection(__scopeSelect);\n\n  const clearAutoScrollTimer = React.useCallback(() => {\n    if (autoScrollTimerRef.current !== null) {\n      window.clearInterval(autoScrollTimerRef.current);\n      autoScrollTimerRef.current = null;\n    }\n  }, []);\n\n  React.useEffect(() => {\n    return () => clearAutoScrollTimer();\n  }, [clearAutoScrollTimer]);\n\n  // When the viewport becomes scrollable on either side, the relevant scroll button will mount.\n  // Because it is part of the normal flow, it will push down (top button) or shrink (bottom button)\n  // the viewport, potentially causing the active item to now be partially out of view.\n  // We re-run the `scrollIntoView` logic to make sure it stays within the viewport.\n  useLayoutEffect(() => {\n    const activeItem = getItems().find((item) => item.ref.current === document.activeElement);\n    activeItem?.ref.current?.scrollIntoView({ block: 'nearest' });\n  }, [getItems]);\n\n  return (\n    <Primitive.div\n      aria-hidden\n      {...scrollIndicatorProps}\n      ref={forwardedRef}\n      style={{ flexShrink: 0, ...scrollIndicatorProps.style }}\n      onPointerDown={composeEventHandlers(scrollIndicatorProps.onPointerDown, () => {\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerMove={composeEventHandlers(scrollIndicatorProps.onPointerMove, () => {\n        contentContext.onItemLeave?.();\n        if (autoScrollTimerRef.current === null) {\n          autoScrollTimerRef.current = window.setInterval(onAutoScroll, 50);\n        }\n      })}\n      onPointerLeave={composeEventHandlers(scrollIndicatorProps.onPointerLeave, () => {\n        clearAutoScrollTimer();\n      })}\n    />\n  );\n});\n\n/* -------------------------------------------------------------------------------------------------\n * SelectSeparator\n * -----------------------------------------------------------------------------------------------*/\n\nconst SEPARATOR_NAME = 'SelectSeparator';\n\ntype SelectSeparatorElement = React.ElementRef<typeof Primitive.div>;\ninterface SelectSeparatorProps extends PrimitiveDivProps {}\n\nconst SelectSeparator = React.forwardRef<SelectSeparatorElement, SelectSeparatorProps>(\n  (props: ScopedProps<SelectSeparatorProps>, forwardedRef) => {\n    const { __scopeSelect, ...separatorProps } = props;\n    return <Primitive.div aria-hidden {...separatorProps} ref={forwardedRef} />;\n  }\n);\n\nSelectSeparator.displayName = SEPARATOR_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * SelectArrow\n * -----------------------------------------------------------------------------------------------*/\n\nconst ARROW_NAME = 'SelectArrow';\n\ntype SelectArrowElement = React.ElementRef<typeof PopperPrimitive.Arrow>;\ntype PopperArrowProps = Radix.ComponentPropsWithoutRef<typeof PopperPrimitive.Arrow>;\ninterface SelectArrowProps extends PopperArrowProps {}\n\nconst SelectArrow = React.forwardRef<SelectArrowElement, SelectArrowProps>(\n  (props: ScopedProps<SelectArrowProps>, forwardedRef) => {\n    const { __scopeSelect, ...arrowProps } = props;\n    const popperScope = usePopperScope(__scopeSelect);\n    const context = useSelectContext(ARROW_NAME, __scopeSelect);\n    const contentContext = useSelectContentContext(ARROW_NAME, __scopeSelect);\n    return context.open && contentContext.position === 'popper' ? (\n      <PopperPrimitive.Arrow {...popperScope} {...arrowProps} ref={forwardedRef} />\n    ) : null;\n  }\n);\n\nSelectArrow.displayName = ARROW_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst BubbleSelect = React.forwardRef<HTMLSelectElement, React.ComponentPropsWithoutRef<'select'>>(\n  (props, forwardedRef) => {\n    const { value, ...selectProps } = props;\n    const ref = React.useRef<HTMLSelectElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, ref);\n    const prevValue = usePrevious(value);\n\n    // Bubble value change to parents (e.g form change event)\n    React.useEffect(() => {\n      const select = ref.current!;\n      const selectProto = window.HTMLSelectElement.prototype;\n      const descriptor = Object.getOwnPropertyDescriptor(\n        selectProto,\n        'value'\n      ) as PropertyDescriptor;\n      const setValue = descriptor.set;\n      if (prevValue !== value && setValue) {\n        const event = new Event('change', { bubbles: true });\n        setValue.call(select, value);\n        select.dispatchEvent(event);\n      }\n    }, [prevValue, value]);\n\n    /**\n     * We purposefully use a `select` here to support form autofill as much\n     * as possible.\n     *\n     * We purposefully do not add the `value` attribute here to allow the value\n     * to be set programatically and bubble to any parent form `onChange` event.\n     * Adding the `value` will cause React to consider the programatic\n     * dispatch a duplicate and it will get swallowed.\n     *\n     * We use `VisuallyHidden` rather than `display: \"none\"` because Safari autofill\n     * won't work otherwise.\n     */\n    return (\n      <VisuallyHidden asChild>\n        <select {...selectProps} ref={composedRefs} defaultValue={value} />\n      </VisuallyHidden>\n    );\n  }\n);\n\nBubbleSelect.displayName = 'BubbleSelect';\n\nfunction useTypeaheadSearch(onSearchChange: (search: string) => void) {\n  const handleSearchChange = useCallbackRef(onSearchChange);\n  const searchRef = React.useRef('');\n  const timerRef = React.useRef(0);\n\n  const handleTypeaheadSearch = React.useCallback(\n    (key: string) => {\n      const search = searchRef.current + key;\n      handleSearchChange(search);\n\n      (function updateSearch(value: string) {\n        searchRef.current = value;\n        window.clearTimeout(timerRef.current);\n        // Reset `searchRef` 1 second after it was last updated\n        if (value !== '') timerRef.current = window.setTimeout(() => updateSearch(''), 1000);\n      })(search);\n    },\n    [handleSearchChange]\n  );\n\n  const resetTypeahead = React.useCallback(() => {\n    searchRef.current = '';\n    window.clearTimeout(timerRef.current);\n  }, []);\n\n  React.useEffect(() => {\n    return () => window.clearTimeout(timerRef.current);\n  }, []);\n\n  return [searchRef, handleTypeaheadSearch, resetTypeahead] as const;\n}\n\n/**\n * This is the \"meat\" of the typeahead matching logic. It takes in a list of items,\n * the search and the current item, and returns the next item (or `undefined`).\n *\n * We normalize the search because if a user has repeatedly pressed a character,\n * we want the exact same behavior as if we only had that one character\n * (ie. cycle through items starting with that character)\n *\n * We also reorder the items by wrapping the array around the current item.\n * This is so we always look forward from the current item, and picking the first\n * item will always be the correct one.\n *\n * Finally, if the normalized search is exactly one character, we exclude the\n * current item from the values because otherwise it would be the first to match always\n * and focus would never move. This is as opposed to the regular case, where we\n * don't want focus to move if the current item still matches.\n */\nfunction findNextItem<T extends { textValue: string }>(\n  items: T[],\n  search: string,\n  currentItem?: T\n) {\n  const isRepeated = search.length > 1 && Array.from(search).every((char) => char === search[0]);\n  const normalizedSearch = isRepeated ? search[0] : search;\n  const currentItemIndex = currentItem ? items.indexOf(currentItem) : -1;\n  let wrappedItems = wrapArray(items, Math.max(currentItemIndex, 0));\n  const excludeCurrentItem = normalizedSearch.length === 1;\n  if (excludeCurrentItem) wrappedItems = wrappedItems.filter((v) => v !== currentItem);\n  const nextItem = wrappedItems.find((item) =>\n    item.textValue.toLowerCase().startsWith(normalizedSearch.toLowerCase())\n  );\n  return nextItem !== currentItem ? nextItem : undefined;\n}\n\n/**\n * Wraps an array around itself at a given start index\n * Example: `wrapArray(['a', 'b', 'c', 'd'], 2) === ['c', 'd', 'a', 'b']`\n */\nfunction wrapArray<T>(array: T[], startIndex: number) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nconst Root = Select;\nconst Trigger = SelectTrigger;\nconst Value = SelectValue;\nconst Icon = SelectIcon;\nconst Portal = SelectPortal;\nconst Content = SelectContent;\nconst Viewport = SelectViewport;\nconst Group = SelectGroup;\nconst Label = SelectLabel;\nconst Item = SelectItem;\nconst ItemText = SelectItemText;\nconst ItemIndicator = SelectItemIndicator;\nconst ScrollUpButton = SelectScrollUpButton;\nconst ScrollDownButton = SelectScrollDownButton;\nconst Separator = SelectSeparator;\nconst Arrow = SelectArrow;\n\nexport {\n  createSelectScope,\n  //\n  Select,\n  SelectTrigger,\n  SelectValue,\n  SelectIcon,\n  SelectPortal,\n  SelectContent,\n  SelectViewport,\n  SelectGroup,\n  SelectLabel,\n  SelectItem,\n  SelectItemText,\n  SelectItemIndicator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n  SelectSeparator,\n  SelectArrow,\n  //\n  Root,\n  Trigger,\n  Value,\n  Icon,\n  Portal,\n  Content,\n  Viewport,\n  Group,\n  Label,\n  Item,\n  ItemText,\n  ItemIndicator,\n  ScrollUpButton,\n  ScrollDownButton,\n  Separator,\n  Arrow,\n};\nexport type {\n  SelectProps,\n  SelectTriggerProps,\n  SelectValueProps,\n  SelectIconProps,\n  SelectPortalProps,\n  SelectContentProps,\n  SelectViewportProps,\n  SelectGroupProps,\n  SelectLabelProps,\n  SelectItemProps,\n  SelectItemTextProps,\n  SelectItemIndicatorProps,\n  SelectScrollUpButtonProps,\n  SelectScrollDownButtonProps,\n  SelectSeparatorProps,\n  SelectArrowProps,\n};\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import * as React from 'react';\n\nfunction usePrevious<T>(value: T) {\n  const ref = React.useRef({ value, previous: value });\n\n  // We compare values before making an update to ensure that\n  // a change has been made. This ensures the previous value is\n  // persisted correctly between renders.\n  return React.useMemo(() => {\n    if (ref.current.value !== value) {\n      ref.current.previous = ref.current.value;\n      ref.current.value = value;\n    }\n    return ref.current.previous;\n  }, [value]);\n}\n\nexport { usePrevious };\n","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;"],"names":["$b73a6c6685e72184$export$b04be29aa201d4f5","$7V4JZ$forwardRef","props","forwardedRef","$7V4JZ$createElement","$7V4JZ$Primitive","label","$7V4JZ$babelruntimehelpersesmextends","ref","onMouseDown","event","_props$onMouseDown","call","defaultPrevented","detail","preventDefault","$b73a6c6685e72184$export$be92b6f5f03c0fe9","$ae6933e535247d3d$export$7d15b64cf5a3a4c4","value","_ref","_ref2","_slicedToArray","min","max","Math","$ea1ef594cf570d83$export$439d29a4e110a164","$kVwnw$forwardRef","$kVwnw$createElement","$kVwnw$Primitive","span","$kVwnw$babelruntimehelpersesmextends","style","_objectSpread","position","border","width","height","padding","margin","overflow","clip","whiteSpace","wordWrap","$cc7e05a45900e73f$var$OPEN_KEYS","$cc7e05a45900e73f$var$SELECTION_KEYS","$cc7e05a45900e73f$var$SELECT_NAME","_$01b9c$createCollect","$01b9c$createCollection","_$01b9c$createCollect2","$cc7e05a45900e73f$var$Collection","$cc7e05a45900e73f$var$useCollection","$cc7e05a45900e73f$var$createCollectionScope","_$01b9c$createContext","$01b9c$createContextScope","$01b9c$createPopperScope","_$01b9c$createContext2","$cc7e05a45900e73f$var$createSelectContext","$cc7e05a45900e73f$var$usePopperScope","_$cc7e05a45900e73f$va","_$cc7e05a45900e73f$va2","$cc7e05a45900e73f$var$SelectProvider","$cc7e05a45900e73f$var$useSelectContext","_$cc7e05a45900e73f$va3","_$cc7e05a45900e73f$va4","$cc7e05a45900e73f$var$SelectNativeOptionsProvider","$cc7e05a45900e73f$var$useSelectNativeOptionsContext","$cc7e05a45900e73f$export$ef9b1a59e592288f","__scopeSelect","children","openProp","open","defaultOpen","onOpenChange","valueProp","defaultValue","onValueChange","dir","name","autoComplete","disabled","required","popperScope","_$01b9c$useState","$01b9c$useState","_$01b9c$useState2","trigger","setTrigger","_$01b9c$useState3","_$01b9c$useState4","valueNode","setValueNode","_$01b9c$useState5","_$01b9c$useState6","valueNodeHasChildren","setValueNodeHasChildren","direction","$01b9c$useDirection","_$01b9c$useControllab","$01b9c$useControllableState","prop","defaultProp","onChange","_$01b9c$useControllab2","_$01b9c$useControllab3","setOpen","_$01b9c$useControllab4","_$01b9c$useControllab5","setValue","triggerPointerDownPosRef","$01b9c$useRef","isFormControl","Boolean","closest","_$01b9c$useState7","Set","_$01b9c$useState8","nativeOptionsSet","setNativeOptionsSet","nativeSelectKey","Array","from","map","option","join","$01b9c$createElement","$01b9c$Root","scope","onTriggerChange","onValueNodeChange","onValueNodeHasChildrenChange","contentId","$01b9c$useId","Provider","onNativeOptionAdd","$01b9c$useCallback","prev","add","onNativeOptionRemove","optionsSet","delete","$cc7e05a45900e73f$var$BubbleSelect","key","tabIndex","target","undefined","$cc7e05a45900e73f$var$TRIGGER_NAME","$cc7e05a45900e73f$export$3ac1e88a1c0b9f1","$01b9c$forwardRef","_props$disabled","triggerProps","_objectWithoutProperties","_excluded","context","isDisabled","composedRefs","$01b9c$useComposedRefs","getItems","_$cc7e05a45900e73f$va5","$cc7e05a45900e73f$var$useTypeaheadSearch","search","enabledItems","filter","item","currentItem","find","nextItem","$cc7e05a45900e73f$var$findNextItem","_$cc7e05a45900e73f$va6","searchRef","handleTypeaheadSearch","resetTypeahead","handleOpen","$01b9c$Anchor","$01b9c$babelruntimehelpersesmextends","asChild","$01b9c$Primitive","button","type","role","onClick","$01b9c$composeEventHandlers","currentTarget","focus","onPointerDown","hasPointerCapture","pointerId","releasePointerCapture","ctrlKey","current","x","round","pageX","y","pageY","onKeyDown","isTypingAhead","altKey","metaKey","length","includes","$cc7e05a45900e73f$var$VALUE_NAME","$cc7e05a45900e73f$export$e288731fd71264f0","placeholder","valueProps","_excluded2","hasChildren","$01b9c$useLayoutEffect","pointerEvents","$cc7e05a45900e73f$export$b2af6c9944296213","$01b9c$Portal","$cc7e05a45900e73f$var$CONTENT_NAME","$cc7e05a45900e73f$export$c973a4b3cb86a03d","_$01b9c$useState9","_$01b9c$useState10","fragment","setFragment","DocumentFragment","frag","$01b9c$createPortal","$cc7e05a45900e73f$var$SelectContentProvider","Slot","$cc7e05a45900e73f$var$SelectContentImpl","$cc7e05a45900e73f$var$CONTENT_MARGIN","_$cc7e05a45900e73f$va7","_$cc7e05a45900e73f$va8","$cc7e05a45900e73f$var$useSelectContentContext","_props$position","onCloseAutoFocus","onEscapeKeyDown","onPointerDownOutside","side","sideOffset","align","alignOffset","arrowPadding","collisionBoundary","collisionPadding","sticky","hideWhenDetached","avoidCollisions","contentProps","_excluded4","_$01b9c$useState11","_$01b9c$useState12","content","setContent","_$01b9c$useState13","_$01b9c$useState14","viewport","setViewport","node","_$01b9c$useState15","_$01b9c$useState16","selectedItem","setSelectedItem","_$01b9c$useState17","_$01b9c$useState18","selectedItemText","setSelectedItemText","_$01b9c$useState19","_$01b9c$useState20","isPositioned","setIsPositioned","firstValidItemFoundRef","$01b9c$useEffect","$01b9c$hideOthers","$01b9c$useFocusGuards","focusFirst","candidates","arr","_step","_getItems$map","_getItems$map2","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","firstItem","_restItems$slice","slice","lastItem","PREVIOUSLY_FOCUSED_ELEMENT","document","activeElement","_iterator","_createForOfIteratorHelper","s","n","done","candidate","scrollIntoView","block","scrollTop","scrollHeight","err","e","f","focusSelectedItem","pointerMoveDelta","handlePointerMove","_triggerPointerDownPo","_triggerPointerDownPo2","_triggerPointerDownPo3","_triggerPointerDownPo4","abs","handlePointerUp","contains","removeEventListener","addEventListener","capture","once","close","window","_$cc7e05a45900e73f$va9","setTimeout","_$cc7e05a45900e73f$va10","itemRefCallback","isFirstValidItem","handleItemLeave","itemTextRefCallback","SelectPosition","$cc7e05a45900e73f$var$SelectPopperPosition","$cc7e05a45900e73f$var$SelectItemAlignedPosition","popperContentProps","onViewportChange","onItemLeave","$01b9c$RemoveScroll","as","$01b9c$Slot","allowPinchZoom","$01b9c$FocusScope","trapped","onMountAutoFocus","onUnmountAutoFocus","_context$trigger","preventScroll","$01b9c$DismissableLayer","disableOutsidePointerEvents","onFocusOutside","onDismiss","id","onContextMenu","onPlaced","display","flexDirection","outline","isModifierKey","candidateNodes","reverse","currentElement","currentIndex","indexOf","popperProps","_excluded5","contentContext","_$01b9c$useState21","_$01b9c$useState22","contentWrapper","setContentWrapper","_$01b9c$useState23","_$01b9c$useState24","shouldExpandOnScrollRef","shouldRepositionRef","triggerRect","getBoundingClientRect","contentRect","valueNodeRect","itemTextRect","itemTextOffset","left","leftDelta","minContentWidth","contentWidth","rightEdge","innerWidth","clampedLeft","$01b9c$clamp","minWidth","right","rightDelta","leftEdge","clampedRight","items","availableHeight","innerHeight","itemsHeight","contentStyles","getComputedStyle","contentBorderTopWidth","parseInt","borderTopWidth","contentPaddingTop","paddingTop","contentBorderBottomWidth","borderBottomWidth","fullContentHeight","paddingBottom","minContentHeight","offsetHeight","viewportStyles","viewportPaddingTop","viewportPaddingBottom","topEdgeToTriggerMiddle","top","triggerMiddleToBottomEdge","selectedItemHalfHeight","contentTopToItemMiddle","offsetTop","itemMiddleToContentBottom","isLastItem","bottom","viewportOffsetBottom","clientHeight","isFirstItem","concat","minHeight","maxHeight","requestAnimationFrame","_$01b9c$useState25","_$01b9c$useState26","contentZIndex","setContentZIndex","zIndex","handleScrollButtonChange","$cc7e05a45900e73f$var$SelectViewportProvider","onScrollButtonChange","div","boxSizing","_props$align","_props$collisionPaddi","_excluded6","$01b9c$Content","_$cc7e05a45900e73f$va11","_$cc7e05a45900e73f$va12","$cc7e05a45900e73f$var$useSelectViewportContext","$cc7e05a45900e73f$var$VIEWPORT_NAME","$cc7e05a45900e73f$export$9ed6e7b40248d36d","viewportProps","_excluded7","viewportContext","prevScrollTopRef","$01b9c$Fragment","dangerouslySetInnerHTML","__html","flex","onScroll","scrolledBy","cssMinHeight","parseFloat","cssHeight","prevHeight","nextHeight","clampedNextHeight","heightDiff","justifyContent","$cc7e05a45900e73f$var$GROUP_NAME","_$cc7e05a45900e73f$va13","_$cc7e05a45900e73f$va14","$cc7e05a45900e73f$var$ITEM_NAME","_$cc7e05a45900e73f$va15","_$cc7e05a45900e73f$va16","$cc7e05a45900e73f$var$SelectItemContextProvider","$cc7e05a45900e73f$var$useSelectItemContext","$cc7e05a45900e73f$export$13ef48a934230896","_props$disabled2","textValueProp","textValue","itemProps","_excluded10","isSelected","_$01b9c$useState27","_$01b9c$useState28","setTextValue","_$01b9c$useState29","_$01b9c$useState30","isFocused","setIsFocused","_contentContext$itemR","textId","handleSelect","onItemTextChange","prevTextValue","_node$textContent","textContent","trim","ItemSlot","onFocus","onBlur","onPointerUp","onPointerMove","_contentContext$onIte","onPointerLeave","_contentContext$onIte2","_contentContext$searc","$cc7e05a45900e73f$var$ITEM_TEXT_NAME","$cc7e05a45900e73f$export$3572fb0fb821ff49","itemTextProps","_excluded11","itemContext","nativeOptionsContext","_$01b9c$useState31","_$01b9c$useState32","itemTextNode","setItemTextNode","_contentContext$itemT","nativeOption","$01b9c$useMemo","selectProps","_excluded16","prevValue","$8LvvK$useRef","previous","$8LvvK$useMemo","$01b9c$usePrevious","select","selectProto","HTMLSelectElement","prototype","Object","getOwnPropertyDescriptor","set","Event","bubbles","dispatchEvent","$01b9c$VisuallyHidden","onSearchChange","handleSearchChange","$01b9c$useCallbackRef","timerRef","updateSearch","clearTimeout","array","startIndex","normalizedSearch","every","char","currentItemIndex","wrappedItems","_","index","v","toLowerCase","startsWith","displayName","$cc7e05a45900e73f$export$be92b6f5f03c0fe9","$cc7e05a45900e73f$export$41fb9f06171c75f4","$cc7e05a45900e73f$export$4c8d1a57a761ef94","$cc7e05a45900e73f$export$602eac185826482c","$cc7e05a45900e73f$export$7c6e2c02157bb7d2","$cc7e05a45900e73f$export$d5c6c08dc2d3ca7","$cc7e05a45900e73f$export$6d08773d2e66f8f2","$cc7e05a45900e73f$export$d6e5bf9c43ea9319","r","t","isArray","clsx","arguments"],"sourceRoot":""}