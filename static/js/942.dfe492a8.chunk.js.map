{"version":3,"file":"static/js/942.dfe492a8.chunk.js","mappings":"wMAEaA,EAAY,SAACC,GAAsB,OAAKA,EAAMC,YAAYC,MAAM,EAChEC,EAAc,SAACH,GAAsB,OAAKA,EAAMC,YAAYG,QAAQ,E,oBCApEC,GAAwCC,EAAAA,EAAAA,OAAK,SAAAC,GAAsB,IAAnBC,EAAWD,EAAXC,YACnDC,EAA6BD,EAA7BC,QAASC,EAAoBF,EAApBE,MAAOC,EAAaH,EAAbG,SACxB,OACEC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,OAAKC,IAAKL,EAAOM,IAAK,WACtBF,EAAAA,EAAAA,KAAA,OAAAD,SAAMF,KACNG,EAAAA,EAAAA,KAAA,OAAAD,SAAMJ,MAGZ,ICPaQ,EAAe,WAC1B,IAAMC,GAAoBC,EAAAA,EAAAA,QAAuB,MAC3Cf,GAAWgB,EAAAA,EAAAA,IAAejB,GAChCkB,GAAwDC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA/DI,EAAoBF,EAAA,GAAEG,EAAuBH,EAAA,IAEpDI,EAAAA,EAAAA,YAAU,WACmB,IAADC,EAAtBH,IACuB,QAAzBG,EAAAV,EAAkBW,eAAO,IAAAD,GAAzBA,EAA2BE,eAAe,CAAEC,MAAO,MAAOC,SAAU,WAExE,GAAG,CAAC5B,IAEJ,IASM6B,EAAyB,OAAR7B,QAAQ,IAARA,OAAQ,EAARA,EAAU8B,KAAI,SAACC,EAAGC,GAAK,OAAKtB,EAAAA,EAAAA,KAACT,EAAW,CAAaG,YAAa2B,GAApBC,EAAyB,IAE9F,OACExB,EAAAA,EAAAA,MAAA,OAAKyB,SAZiB,SAACC,GACvB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cAAgB,KAC7EpB,GAAwBC,GAAwB,GAEjDD,GAAwBC,GAAwB,EAEpD,EAKkCoB,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAASnC,SAAA,CAC3EoB,GACDnB,EAAAA,EAAAA,KAAA,OAAKmC,IAAK/B,MAGhB,E,oBC1BagC,EAAqB,WAChC,IAAMhD,GAASkB,EAAAA,EAAAA,IAAerB,GAC9BsB,GAA0BC,EAAAA,EAAAA,UAAiB,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvC8B,EAAK5B,EAAA,GAAE6B,EAAQ7B,EAAA,GAChB8B,GAAWC,EAAAA,EAAAA,MAMXC,EAAgB,WACfJ,IAGLE,GAASG,EAAAA,EAAAA,IAAYL,IACrBC,EAAS,IACX,EAKA,OACExC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAC2C,EAAAA,EAAS,CACRC,QAPoB,WACxBH,GACF,EAMMI,aAnBkB,SAACC,GACvBR,EAASQ,EACX,EAkBMT,MAAOA,EACPU,YAAa,qBAEf/C,EAAAA,EAAAA,KAACgD,EAAAA,EAAM,CAACC,SAAqB,UAAX7D,EAAoB8D,QAAST,EAAc1C,SAAC,WAKpE,ECTA,GAAeoD,EAAAA,EAAAA,IAvBE,WACf,IAAM/D,GAASkB,EAAAA,EAAAA,IAAerB,GACxBsD,GAAWC,EAAAA,EAAAA,MASjB,OAPA3B,EAAAA,EAAAA,YAAU,WAER,OADA0B,GAASa,EAAAA,EAAAA,OACF,WACLb,GAASc,EAAAA,EAAAA,MACX,CACF,GAAG,KAGDvD,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACc,UAAXX,IAAsBY,EAAAA,EAAAA,KAAA,OAAAD,SAAK,kDAC5BD,EAAAA,EAAAA,MAAA,OAAKkC,MAAO,CAAEsB,MAAO,QAASC,OAAQ,iBAAkBxD,SAAA,CAAC,QAEvDC,EAAAA,EAAAA,KAACG,EAAY,KACbH,EAAAA,EAAAA,KAACoC,EAAkB,SAI3B,G","sources":["app/model/selectors/chat-selector.ts","components/Pages/Chat/ui/Chat/ChatMessages/ChatMessage/ChatMessage.tsx","components/Pages/Chat/ui/Chat/ChatMessages/ChatMessages.tsx","components/Pages/Chat/ui/Chat/AddChatMessageForm/AddChatMEssageForm.tsx","components/Pages/Chat/ui/ChatPage.tsx"],"sourcesContent":["import { RootReducerType } from '../../store'\n\nexport const getStatus = (state: RootReducerType) => state.chatReducer.status\nexport const getMessages = (state: RootReducerType) => state.chatReducer.messages\n","import { FC, memo } from 'react'\nimport { ChatMessageAPIType } from '../../../../api/chat-api'\n\nexport const ChatMessage: FC<ChatMessagePropsType> = memo(({ messageBody }) => {\n  const { message, photo, userName } = messageBody\n  return (\n    <div>\n      <img src={photo} alt={'photo'} />\n      <div>{userName}</div>\n      <div>{message}</div>\n    </div>\n  )\n})\n//types\ntype ChatMessagePropsType = {\n  messageBody: ChatMessageAPIType\n}\n","import { UIEvent, useEffect, useRef, useState } from 'react'\nimport { useAppSelector } from '../../../../../../app/store'\nimport { getMessages } from '../../../../../../app/model/selectors/chat-selector'\nimport { ChatMessage } from './ChatMessage/ChatMessage'\n\nexport const ChatMessages = () => {\n  const messagesAnchorRef = useRef<HTMLDivElement>(null)\n  const messages = useAppSelector(getMessages)\n  const [isAutoScrollIsActive, setIsAutoScrollIsActive] = useState(true)\n\n  useEffect(() => {\n    if (isAutoScrollIsActive) {\n      messagesAnchorRef.current?.scrollIntoView({ block: 'end', behavior: 'smooth' })\n    }\n  }, [messages])\n\n  const onScrollHandler = (e: UIEvent<HTMLDivElement>) => {\n    const element = e.currentTarget\n    if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\n      !isAutoScrollIsActive && setIsAutoScrollIsActive(true)\n    } else {\n      isAutoScrollIsActive && setIsAutoScrollIsActive(false)\n    }\n  }\n\n  const mappedMessages = messages?.map((m, index) => <ChatMessage key={index} messageBody={m} />)\n\n  return (\n    <div onScroll={onScrollHandler} style={{ height: '300px', overflowY: 'auto' }}>\n      {mappedMessages}\n      <div ref={messagesAnchorRef}></div>\n    </div>\n  )\n}\n","import { useAppDispatch, useAppSelector } from '../../../../../../app/store'\nimport { getStatus } from '../../../../../../app/model/selectors/chat-selector'\nimport { useState } from 'react'\nimport { sendMessage } from '../../../model/chat-reducer'\nimport { TextField } from '../../../../../ui/textfield'\nimport { Button } from '../../../../../ui/button'\n\nexport const AddChatMessageForm = () => {\n  const status = useAppSelector(getStatus)\n  const [value, setValue] = useState<string>('')\n  const dispatch = useAppDispatch()\n\n  const onChangeHandler = (text: string) => {\n    setValue(text)\n  }\n\n  const addNewMessage = () => {\n    if (!value) {\n      return\n    }\n    dispatch(sendMessage(value))\n    setValue('')\n  }\n  const onKeyPressHandler = () => {\n    addNewMessage()\n  }\n\n  return (\n    <div>\n      <TextField\n        onEnter={onKeyPressHandler}\n        onChangeText={onChangeHandler}\n        value={value}\n        placeholder={'type message...'}\n      />\n      <Button disabled={status !== 'ready'} onClick={addNewMessage}>\n        Send\n      </Button>\n    </div>\n  )\n}\n","import { useEffect } from 'react'\nimport { withAuthRedirect } from '../../../../hoc/withAuthRedirect'\nimport { useAppDispatch, useAppSelector } from '../../../../app/store'\nimport { startMessagesListening, stopMessagesListening } from '../model/chat-reducer'\nimport { getStatus } from '../../../../app/model/selectors/chat-selector'\nimport { ChatMessages } from './Chat/ChatMessages/ChatMessages'\nimport { AddChatMessageForm } from './Chat/AddChatMessageForm/AddChatMEssageForm'\n\nconst ChatPage = () => {\n  const status = useAppSelector(getStatus)\n  const dispatch = useAppDispatch()\n\n  useEffect(() => {\n    dispatch(startMessagesListening())\n    return () => {\n      dispatch(stopMessagesListening())\n    }\n  }, [])\n\n  return (\n    <div>\n      {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\n      <div style={{ width: '500px', border: '1px solid red' }}>\n        Chat\n        <ChatMessages />\n        <AddChatMessageForm />\n      </div>\n    </div>\n  )\n}\n\nexport default withAuthRedirect(ChatPage)\n"],"names":["getStatus","state","chatReducer","status","getMessages","messages","ChatMessage","memo","_ref","messageBody","message","photo","userName","_jsxs","children","_jsx","src","alt","ChatMessages","messagesAnchorRef","useRef","useAppSelector","_useState","useState","_useState2","_slicedToArray","isAutoScrollIsActive","setIsAutoScrollIsActive","useEffect","_messagesAnchorRef$cu","current","scrollIntoView","block","behavior","mappedMessages","map","m","index","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","style","height","overflowY","ref","AddChatMessageForm","value","setValue","dispatch","useAppDispatch","addNewMessage","sendMessage","TextField","onEnter","onChangeText","text","placeholder","Button","disabled","onClick","withAuthRedirect","startMessagesListening","stopMessagesListening","width","border"],"sourceRoot":""}