{"version":3,"file":"static/js/704.f702587d.chunk.js","mappings":"qRACA,EAA4B,wB,UCOfA,EAAsB,SAAHC,GAAiC,IAA3BC,EAAQD,EAARC,SAAUC,EAASF,EAATE,UAC9C,OAAOC,EAAAA,EAAAA,KAAA,OAAKD,UAAS,GAAAE,OAAKC,EAAW,KAAAD,OAAIF,GAAYD,SAAEA,GACzD,ECyCaK,GAAiBC,EAAAA,EAAAA,GAA6B,CACzDC,KAAM,SADsBD,EAvCoC,SAACE,GACjE,IAAMC,GAAUC,EAAAA,EAAAA,GAAeC,EAAAA,IAE/B,OACEC,EAAAA,EAAAA,MAACd,EAAI,CAACG,UAAWG,EAAAA,EAAES,UAAUb,SAAA,EAC3BY,EAAAA,EAAAA,MAACE,EAAAA,EAAU,CAAAd,SAAA,CAAC,8BACkB,KAC5BE,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACC,GAAI,IAAKC,KAAM,wCAAyCC,OAAQ,SAAUC,IAAI,aAAYlB,SAAC,kBAIzGE,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAAAd,SAAC,6CACZE,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAAAd,SAAC,+BACZE,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAAAd,SAAC,oBACZE,EAAAA,EAAAA,KAACY,EAAAA,EAAU,CAACb,UAAWG,EAAAA,EAAEe,MAAOC,QAAS,QAAQpB,SAAC,WAGlDY,EAAAA,EAAAA,MAAA,QAAMS,SAAUb,EAAMc,aAAcrB,UAAWG,EAAAA,EAAEmB,cAAcvB,SAAA,EAC7DE,EAAAA,EAAAA,KAAA,OAAKD,UAAWG,EAAAA,EAAEoB,SAASxB,UAAEyB,EAAAA,EAAAA,IAAa,QAAS,QAAS,CAACC,EAAAA,IAAWC,EAAAA,OACxEzB,EAAAA,EAAAA,KAAA,OAAKD,UAAWG,EAAAA,EAAEoB,SAASxB,UACxByB,EAAAA,EAAAA,IAAa,WAAY,WAAY,CAACC,EAAAA,IAAWC,EAAAA,GAAO,CAAEC,KAAM,gBAEnE1B,EAAAA,EAAAA,KAAA,OAAKD,UAAWG,EAAAA,EAAEyB,SAAS7B,UACxByB,EAAAA,EAAAA,IAAa,aAAc,GAAI,GAAIK,EAAAA,GAAU,CAAEF,KAAM,YAAc,iBAKrEnB,IAAWP,EAAAA,EAAAA,KAAA,OAAK6B,IAAG,GAAA5B,OAAKM,GAAWuB,IAAK,qBACxCvB,IAAWP,EAAAA,EAAAA,KAAA,OAAKD,UAAWG,EAAAA,EAAEoB,SAASxB,UAAEyB,EAAAA,EAAAA,IAAa,UAAW,UAAW,CAACC,EAAAA,IAAWC,EAAAA,OAExFzB,EAAAA,EAAAA,KAAC+B,EAAAA,EAAM,CAACC,WAAW,EAAMjC,UAAWG,EAAAA,EAAE+B,OAAQP,KAAM,SAAS5B,SAAC,eAMtE,ICxBA,GAAeoC,EAAAA,EAAAA,KANS,SAACC,GACvB,MAAO,CACLC,QAAQC,EAAAA,EAAAA,IAAUF,GAEtB,GAEwC,CACtCG,MAAAA,EAAAA,IADF,EAjBwC,SAAChC,GACvC,IAAQgC,EAAkBhC,EAAlBgC,MAOR,OAP0BhC,EAAX8B,QAOCpC,EAAAA,EAAAA,KAACuC,EAAAA,GAAQ,CAACC,GAAI,cAAiBxC,EAAAA,EAAAA,KAACG,EAAc,CAACgB,SAL9C,SAACsB,GAChB,IAAQC,EAAyCD,EAAzCC,MAAOC,EAAkCF,EAAlCE,SAAUC,EAAwBH,EAAxBG,WAAYrC,EAAYkC,EAAZlC,QACrC+B,EAAMI,EAAOC,EAAUC,EAAYrC,EACrC,GAGF,G,qBChBA,KAAgB,UAAY,8BAA8B,MAAQ,0BAA0B,cAAgB,kCAAkC,SAAW,6BAA6B,SAAW,6BAA6B,OAAS,2B","sources":["webpack://samurai-way/./src/components/ui/card/card.module.scss?29d1","components/ui/card/card.tsx","components/Pages/Login/LoginForm/LoginForm.tsx","components/Pages/Login/Login.tsx","webpack://samurai-way/./src/components/Pages/Login/LoginForm/Login-form.module.scss?6d7f"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"cardBlock\":\"card_cardBlock__4qCDc\"};","import { FC, ReactNode } from 'react'\r\n\r\nimport s from './card.module.scss'\r\ntype CardProps = {\r\n  children: ReactNode\r\n  className?: string\r\n}\r\n\r\nexport const Card: FC<CardProps> = ({ children, className }) => {\r\n  return <div className={`${s.cardBlock} ${className}`}>{children}</div>\r\n}\r\n","import React from 'react'\r\nimport { InjectedFormProps, reduxForm } from 'redux-form'\r\nimport { CheckBox, fieldCreator, Input } from '../../../common/FormsControls/FormsControl'\r\nimport { required } from '../../../../utils/validators'\r\nimport s from './Login-form.module.scss'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootReducerType, useAppSelector } from '../../../../app/store'\r\nimport { Typography } from '../../../ui/typography'\r\nimport { Button } from '../../../ui/button'\r\nimport { Card } from '../../../ui/card'\r\nimport { getCaptchaUrl } from '../../../../app/selectors/auth-selector'\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormDataType>> = (props) => {\r\n  const captcha = useAppSelector(getCaptchaUrl)\r\n\r\n  return (\r\n    <Card className={s.container}>\r\n      <Typography>\r\n        To log in get registered on{' '}\r\n        <Typography as={'a'} href={'https://social-network.samuraijs.com/'} target={'_blank'} rel=\"noreferrer\">\r\n          this site\r\n        </Typography>\r\n      </Typography>\r\n      <Typography>or use common test account credentials:</Typography>\r\n      <Typography>Email: free@samuraijs.com</Typography>\r\n      <Typography>Password: free</Typography>\r\n      <Typography className={s.title} variant={'large'}>\r\n        Login\r\n      </Typography>\r\n      <form onSubmit={props.handleSubmit} className={s.formContainer}>\r\n        <div className={s.inputBox}>{fieldCreator('email', 'Email', [required], Input)}</div>\r\n        <div className={s.inputBox}>\r\n          {fieldCreator('password', 'Password', [required], Input, { type: 'password' })}\r\n        </div>\r\n        <div className={s.checkBox}>\r\n          {fieldCreator('rememberMe', '', [], CheckBox, { type: 'checkbox' }, 'Remember Me')}\r\n        </div>\r\n        {/*//--------------------------------------------------------*/}\r\n        {/*{props.error && <div className={s.error}>{props.error}</div>}*/}\r\n\r\n        {captcha && <img src={`${captcha}`} alt={'anti-bot captcha'} />}\r\n        {captcha && <div className={s.inputBox}>{fieldCreator('captcha', 'Captcha', [required], Input)}</div>}\r\n\r\n        <Button fullWidth={true} className={s.submit} type={'submit'}>\r\n          Login\r\n        </Button>\r\n      </form>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<LoginFormDataType>({\r\n  form: 'login',\r\n})(LoginForm)\r\n\r\n// Types\r\nexport type LoginFormDataType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha: string\r\n}\r\n","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { login } from './auth-reducer'\r\nimport { RootReducerType } from '../../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\nimport { getIsAuth } from '../../../app/selectors/auth-selector'\r\nimport { LoginFormDataType, LoginReduxForm } from './LoginForm/LoginForm'\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n  const { login, isAuth } = props\r\n\r\n  const onSubmit = (formData: LoginFormDataType) => {\r\n    const { email, password, rememberMe, captcha } = formData\r\n    login(email, password, rememberMe, captcha)\r\n  }\r\n\r\n  return isAuth ? <Redirect to={'/profile'} /> : <LoginReduxForm onSubmit={onSubmit} />\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducerType): MapStateToPropsType => {\r\n  return {\r\n    isAuth: getIsAuth(state),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n  login,\r\n})(Login)\r\n\r\n//Types\r\nexport type MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n  login: (email: string, password: string, rememberMe: boolean, captcha: string) => void\r\n}\r\ntype LoginPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Login-form_container__hXfXO\",\"title\":\"Login-form_title__Ttk5A\",\"formContainer\":\"Login-form_formContainer__bLkgr\",\"inputBox\":\"Login-form_inputBox__ywAm4\",\"checkBox\":\"Login-form_checkBox__qYG5D\",\"submit\":\"Login-form_submit__HfbHD\"};"],"names":["Card","_ref","children","className","_jsx","concat","s","LoginReduxForm","reduxForm","form","props","captcha","useAppSelector","getCaptchaUrl","_jsxs","container","Typography","as","href","target","rel","title","variant","onSubmit","handleSubmit","formContainer","inputBox","fieldCreator","required","Input","type","checkBox","CheckBox","src","alt","Button","fullWidth","submit","connect","state","isAuth","getIsAuth","login","Redirect","to","formData","email","password","rememberMe"],"sourceRoot":""}